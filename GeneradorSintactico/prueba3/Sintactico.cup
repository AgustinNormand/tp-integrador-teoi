import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
parser code
{:
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + " no reconocido. valor " + s.value );
    }
:}
action code
{:
:}
/*Declaracion de Terminales */
terminal ID, CONST_INT, OP_ASSIGN, BRACKET_OPEN, BRACKET_CLOSE, SIG_MAS, SIG_MENOS, SIG_DIV, SIG_MUL;
/*Declaracion de No Terminales*/
non terminal pgm , sentencias, sentencia, sentenciaasig, expresion,termino,factor;
start with pgm;
pgm ::= sentencias {: System.out.println("pgm Regla 0 Compila correctamente llegando al simbolo start");:};
sentencias ::= sentencias sentencia {:System.out.println("[Regla 1] Sentencias"); :}| sentencia {:System.out.println("[Regla 2] Sentencia"); :};
sentencia ::= sentenciaasig {:System.out.println("[Regla 3] Sentencia Asig"); :}
sentenciaasig ::=  ID OP_ASSIGN expresion {: System.out.println("[Regla 4] Id OP_ASSIGNa expresion"); :};
expresion ::= expresion SIG_SUMA termino {: System.out.println("[Regla 5] E+T"); :} |expresion SIG_MENOS termino {: System.out.println("[Regla 6] E-T"); :} |termino  {: System.out.println("[Regla 7] Termino"); :};
termino ::= termino SIG_MUL factor {:System.out.println("[Regla 8] T*F"); :} |termino:t SIG_DIV:div factor:f {: System.out.println("[Regla 9] T/F"); RESULT= t + div + f:} |factor:f {:System.out.println("[Regla 10] Factor  valor = "+ f); :};
factor ::=  ID:id {: System.out.println("[Regla 11] Variable  valor = " + id); RESULT = id; :} |CONST_INT:ent {: System.out.println("[Regla 12] Constante  valor = " + ent ); RESULT = ent; :} |BRACKET_OPEN expresion BRACKET_CLOSE {: System.out.println("[Regla 13] Parentesis expresion Parentesis"); :};