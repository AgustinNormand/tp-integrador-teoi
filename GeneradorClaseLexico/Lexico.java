/* The following code was generated by JFlex 1.7.0 */

package com.tpi.teoi;
import java_cup.runtime.Symbol;
import java_cup.runtime.*; //para utilizar cup
import java.util.*;
import jflex.sym;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\42\1\43\1\42\1\42\22\0\1\4\1\0\1\55"+
    "\5\0\1\0\1\0\1\6\1\53\1\4\1\52\1\54\1\5\12\2"+
    "\1\0\1\0\1\37\1\36\1\35\2\0\1\26\1\1\1\45\1\34"+
    "\1\44\1\23\1\17\1\1\1\7\1\1\1\1\1\24\1\51\1\10"+
    "\1\25\1\50\1\1\1\16\1\15\1\11\2\1\1\1\3\1\1\0"+
    "\1\0\1\0\1\0\1\3\1\0\1\32\1\1\1\41\1\33\1\40"+
    "\1\27\1\22\1\1\1\12\1\1\1\1\1\30\1\47\1\13\1\31"+
    "\1\46\1\1\1\21\1\20\1\14\2\1\1\1\3\1\1\0\1\0"+
    "\1\0\7\0\1\43\u1fa2\0\1\43\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\14\2\1\6"+
    "\1\7\1\10\4\2\1\1\1\11\1\1\2\0\5\2"+
    "\1\12\5\2\1\13\1\7\1\14\1\15\4\2\1\0"+
    "\1\16\1\17\1\0\1\20\3\2\1\21\7\2\1\0"+
    "\14\2\1\0\2\2\1\22\10\2\1\23\1\24\20\2"+
    "\1\0\1\2\1\0\5\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\5\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\5\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\2\25\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\2\26\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\2\27\2\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\56\0\346\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\56\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536"+
    "\0\u0564\0\u0592\0\u05c0\0\134\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\56\0\56\0\56\0\56\0\u06d4\0\u0702\0\u0730"+
    "\0\u075e\0\u047e\0\56\0\u04ac\0\u078c\0\134\0\u07ba\0\u07e8"+
    "\0\u0816\0\134\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\134\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\56\0\134\0\u0dd6\0\u0e04\0\u0e32\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0"+
    "\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590"+
    "\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700"+
    "\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870"+
    "\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0"+
    "\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50"+
    "\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0"+
    "\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30"+
    "\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72\0\u1fa0"+
    "\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110"+
    "\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280"+
    "\0\56\0\134\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394"+
    "\0\u23c2\0\u23f0\0\56\0\134\0\u241e\0\u244c\0\u247a\0\u24a8"+
    "\0\u24d6\0\u2504\0\u2532\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618"+
    "\0\u2646\0\u2674\0\u26a2\0\u26d0\0\56\0\134\0\56\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\5\1\6\1\7\2\3"+
    "\1\10\2\3\1\11\2\3\1\12\2\3\1\13\1\3"+
    "\1\14\1\15\1\16\1\3\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\3\2\2\1\27\1\3"+
    "\1\30\1\3\1\31\1\3\1\32\1\33\1\2\1\34"+
    "\57\0\3\3\3\0\26\3\3\0\2\3\2\0\6\3"+
    "\6\0\1\4\51\0\1\35\6\0\1\36\51\0\3\3"+
    "\3\0\1\3\1\37\24\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\4\3\1\40\21\3\3\0\2\3"+
    "\2\0\6\3\5\0\3\3\3\0\2\3\1\41\23\3"+
    "\3\0\2\3\2\0\6\3\5\0\3\3\3\0\5\3"+
    "\1\42\20\3\3\0\2\3\2\0\6\3\5\0\3\3"+
    "\3\0\15\3\1\43\10\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\7\3\1\44\16\3\3\0\2\3"+
    "\2\0\6\3\5\0\3\3\3\0\1\3\1\45\24\3"+
    "\3\0\2\3\2\0\6\3\5\0\3\3\3\0\21\3"+
    "\1\46\4\3\3\0\2\3\2\0\6\3\5\0\3\3"+
    "\3\0\12\3\1\44\13\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\4\3\1\47\21\3\3\0\2\3"+
    "\2\0\6\3\5\0\3\3\3\0\26\3\3\0\1\50"+
    "\1\3\2\0\6\3\5\0\3\3\3\0\26\3\3\0"+
    "\2\3\2\0\1\51\5\3\42\0\1\52\55\0\1\53"+
    "\54\0\1\54\1\55\20\0\3\3\3\0\4\3\1\56"+
    "\21\3\3\0\2\3\2\0\6\3\5\0\3\3\3\0"+
    "\1\3\1\57\24\3\3\0\2\3\2\0\6\3\5\0"+
    "\3\3\3\0\12\3\1\60\13\3\3\0\2\3\2\0"+
    "\6\3\5\0\3\3\3\0\7\3\1\61\16\3\3\0"+
    "\2\3\2\0\6\3\6\0\1\4\54\0\2\62\1\0"+
    "\1\62\2\0\26\62\3\0\3\62\1\0\7\62\1\0"+
    "\1\62\1\63\2\0\1\64\61\0\1\65\50\0\3\3"+
    "\3\0\2\3\1\66\23\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\5\3\1\66\20\3\3\0\2\3"+
    "\2\0\6\3\5\0\3\3\3\0\7\3\1\67\16\3"+
    "\3\0\2\3\2\0\6\3\5\0\3\3\3\0\12\3"+
    "\1\70\13\3\3\0\2\3\2\0\6\3\5\0\3\3"+
    "\3\0\16\3\1\71\7\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\25\3\1\72\3\0\2\3\2\0"+
    "\6\3\5\0\3\3\3\0\22\3\1\73\3\3\3\0"+
    "\2\3\2\0\6\3\5\0\3\3\3\0\24\3\1\72"+
    "\1\3\3\0\2\3\2\0\6\3\5\0\3\3\3\0"+
    "\26\3\3\0\1\3\1\74\2\0\6\3\5\0\3\3"+
    "\3\0\26\3\3\0\2\3\2\0\1\3\1\75\4\3"+
    "\5\0\3\3\3\0\24\3\1\76\1\3\3\0\2\3"+
    "\2\0\6\3\5\0\3\3\3\0\25\3\1\77\3\0"+
    "\2\3\2\0\6\3\5\0\3\3\3\0\22\3\1\100"+
    "\3\3\3\0\2\3\2\0\6\3\5\0\3\3\3\0"+
    "\16\3\1\101\7\3\3\0\2\3\2\0\6\3\5\0"+
    "\2\65\1\0\1\65\1\0\1\102\26\65\3\0\3\65"+
    "\1\0\7\65\1\0\1\65\2\0\3\3\3\0\1\103"+
    "\25\3\3\0\2\3\2\0\6\3\5\0\3\3\3\0"+
    "\3\3\1\104\22\3\3\0\2\3\2\0\6\3\5\0"+
    "\3\3\3\0\17\3\1\105\6\3\3\0\2\3\2\0"+
    "\6\3\5\0\3\3\3\0\23\3\1\106\2\3\3\0"+
    "\2\3\2\0\6\3\5\0\3\3\3\0\21\3\1\107"+
    "\4\3\3\0\2\3\2\0\6\3\5\0\3\3\3\0"+
    "\15\3\1\110\10\3\3\0\2\3\2\0\6\3\5\0"+
    "\3\3\3\0\24\3\1\111\1\3\3\0\2\3\2\0"+
    "\2\3\1\112\3\3\5\0\3\3\3\0\25\3\1\113"+
    "\3\0\2\3\2\0\4\3\1\114\1\3\5\0\3\3"+
    "\3\0\13\3\1\115\12\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\10\3\1\116\15\3\3\0\2\3"+
    "\2\0\6\3\11\0\1\117\51\0\3\3\3\0\1\3"+
    "\1\120\24\3\3\0\2\3\2\0\6\3\5\0\3\3"+
    "\3\0\4\3\1\121\21\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\2\3\1\122\23\3\3\0\2\3"+
    "\2\0\6\3\5\0\3\3\3\0\5\3\1\122\20\3"+
    "\3\0\2\3\2\0\6\3\5\0\3\3\3\0\23\3"+
    "\1\123\2\3\3\0\2\3\2\0\6\3\5\0\3\3"+
    "\3\0\17\3\1\124\6\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\26\3\3\0\1\125\1\3\2\0"+
    "\6\3\5\0\3\3\3\0\12\3\1\126\13\3\3\0"+
    "\2\3\2\0\6\3\5\0\3\3\3\0\26\3\3\0"+
    "\2\3\2\0\1\127\5\3\5\0\3\3\3\0\7\3"+
    "\1\130\16\3\3\0\2\3\2\0\6\3\5\0\3\3"+
    "\3\0\12\3\1\131\13\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\7\3\1\132\16\3\3\0\2\3"+
    "\2\0\6\3\11\0\1\133\51\0\3\3\3\0\10\3"+
    "\1\134\15\3\3\0\2\3\2\0\6\3\5\0\3\3"+
    "\3\0\13\3\1\134\12\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\12\3\1\135\13\3\3\0\2\3"+
    "\2\0\6\3\5\0\3\3\3\0\7\3\1\136\16\3"+
    "\3\0\2\3\2\0\6\3\5\0\3\3\3\0\26\3"+
    "\3\0\1\3\1\137\2\0\6\3\5\0\3\3\3\0"+
    "\22\3\1\140\3\3\3\0\2\3\2\0\6\3\5\0"+
    "\3\3\3\0\26\3\3\0\2\3\2\0\1\3\1\141"+
    "\4\3\5\0\3\3\3\0\16\3\1\142\7\3\3\0"+
    "\2\3\2\0\6\3\5\0\3\3\3\0\23\3\1\143"+
    "\2\3\3\0\2\3\2\0\6\3\5\0\3\3\3\0"+
    "\17\3\1\144\6\3\3\0\2\3\2\0\6\3\5\0"+
    "\3\3\3\0\26\3\3\0\1\145\1\3\2\0\6\3"+
    "\5\0\3\3\3\0\26\3\3\0\2\3\2\0\1\146"+
    "\5\3\5\0\3\3\3\0\21\3\1\147\4\3\3\0"+
    "\2\3\2\0\6\3\5\0\3\3\3\0\13\3\1\150"+
    "\12\3\3\0\2\3\2\0\6\3\5\0\3\3\3\0"+
    "\15\3\1\151\10\3\3\0\2\3\2\0\6\3\5\0"+
    "\3\3\3\0\10\3\1\152\15\3\3\0\2\3\2\0"+
    "\6\3\5\0\3\3\3\0\26\3\3\0\2\3\2\0"+
    "\3\3\1\153\2\3\5\0\3\3\3\0\26\3\3\0"+
    "\2\3\2\0\5\3\1\154\4\0\1\155\3\156\3\155"+
    "\26\156\3\155\2\156\2\0\6\156\4\155\1\157\3\160"+
    "\3\157\26\160\3\157\2\160\2\0\6\160\4\157\1\0"+
    "\3\3\3\0\23\3\1\161\2\3\3\0\2\3\2\0"+
    "\6\3\5\0\3\3\3\0\12\3\1\162\13\3\3\0"+
    "\2\3\2\0\6\3\5\0\3\3\3\0\17\3\1\163"+
    "\6\3\3\0\2\3\2\0\6\3\5\0\3\3\3\0"+
    "\7\3\1\164\16\3\3\0\2\3\2\0\6\3\4\0"+
    "\1\165\3\166\3\165\26\166\3\165\2\166\2\0\6\166"+
    "\4\165\1\167\3\170\3\167\26\170\3\167\2\170\2\0"+
    "\6\170\4\167\20\0\1\171\36\0\3\3\3\0\11\3"+
    "\1\172\14\3\3\0\2\3\2\0\6\3\21\0\1\173"+
    "\41\0\3\3\3\0\6\3\1\174\17\3\3\0\2\3"+
    "\2\0\6\3\5\0\3\3\3\0\12\3\1\175\13\3"+
    "\3\0\2\3\2\0\6\3\5\0\3\3\3\0\23\3"+
    "\1\176\2\3\3\0\2\3\2\0\6\3\5\0\3\3"+
    "\3\0\7\3\1\177\16\3\3\0\2\3\2\0\6\3"+
    "\5\0\3\3\3\0\17\3\1\200\6\3\3\0\2\3"+
    "\2\0\6\3\24\0\1\201\36\0\3\3\3\0\11\3"+
    "\1\202\14\3\3\0\2\3\2\0\6\3\21\0\1\203"+
    "\41\0\3\3\3\0\6\3\1\204\17\3\3\0\2\3"+
    "\2\0\6\3\44\0\1\205\16\0\3\3\3\0\26\3"+
    "\3\0\1\206\1\3\2\0\6\3\50\0\1\207\12\0"+
    "\3\3\3\0\26\3\3\0\2\3\2\0\1\210\5\3"+
    "\5\0\3\3\3\0\26\3\3\0\1\211\1\3\2\0"+
    "\6\3\5\0\3\3\3\0\26\3\3\0\2\3\2\0"+
    "\3\3\1\212\2\3\5\0\3\3\3\0\26\3\3\0"+
    "\2\3\2\0\1\213\5\3\5\0\3\3\3\0\26\3"+
    "\3\0\2\3\2\0\5\3\1\214\44\0\1\215\16\0"+
    "\3\3\3\0\26\3\3\0\1\216\1\3\2\0\6\3"+
    "\50\0\1\217\12\0\3\3\3\0\26\3\3\0\2\3"+
    "\2\0\1\220\5\3\45\0\1\221\15\0\3\3\3\0"+
    "\26\3\3\0\1\3\1\222\2\0\6\3\51\0\1\223"+
    "\11\0\3\3\3\0\26\3\3\0\2\3\2\0\1\3"+
    "\1\224\4\3\4\0\1\225\3\226\3\225\26\226\3\225"+
    "\2\226\2\0\6\226\4\225\1\227\3\230\3\227\26\230"+
    "\3\227\2\230\2\0\6\230\4\227\1\231\3\232\3\231"+
    "\26\232\3\231\2\232\2\0\6\232\4\231\1\233\3\234"+
    "\3\233\26\234\3\233\2\234\2\0\6\234\4\233\41\0"+
    "\1\235\15\0\3\3\3\0\26\3\3\0\1\3\1\236"+
    "\2\0\6\3\51\0\1\237\11\0\3\3\3\0\26\3"+
    "\3\0\2\3\2\0\1\3\1\240\4\3\20\0\1\241"+
    "\42\0\3\3\3\0\5\3\1\242\20\3\3\0\2\3"+
    "\2\0\6\3\15\0\1\243\45\0\3\3\3\0\2\3"+
    "\1\244\23\3\3\0\2\3\2\0\6\3\24\0\1\245"+
    "\36\0\3\3\3\0\11\3\1\246\14\3\3\0\2\3"+
    "\2\0\6\3\24\0\1\247\36\0\3\3\3\0\11\3"+
    "\1\250\14\3\3\0\2\3\2\0\6\3\21\0\1\251"+
    "\41\0\3\3\3\0\6\3\1\252\17\3\3\0\2\3"+
    "\2\0\6\3\21\0\1\253\41\0\3\3\3\0\6\3"+
    "\1\254\17\3\3\0\2\3\2\0\6\3\20\0\1\255"+
    "\42\0\3\3\3\0\5\3\1\256\20\3\3\0\2\3"+
    "\2\0\6\3\15\0\1\257\45\0\3\3\3\0\2\3"+
    "\1\260\23\3\3\0\2\3\2\0\6\3\16\0\1\261"+
    "\44\0\3\3\3\0\3\3\1\262\22\3\3\0\2\3"+
    "\2\0\6\3\13\0\1\263\47\0\3\3\3\0\1\264"+
    "\25\3\3\0\2\3\2\0\6\3\44\0\1\265\16\0"+
    "\3\3\3\0\26\3\3\0\1\266\1\3\2\0\6\3"+
    "\44\0\1\267\16\0\3\3\3\0\26\3\3\0\1\270"+
    "\1\3\2\0\6\3\50\0\1\271\12\0\3\3\3\0"+
    "\26\3\3\0\2\3\2\0\1\272\5\3\50\0\1\273"+
    "\12\0\3\3\3\0\26\3\3\0\2\3\2\0\1\274"+
    "\5\3\16\0\1\275\44\0\3\3\3\0\3\3\1\276"+
    "\22\3\3\0\2\3\2\0\6\3\13\0\1\277\47\0"+
    "\3\3\3\0\1\300\25\3\3\0\2\3\2\0\6\3"+
    "\35\0\1\301\25\0\3\3\3\0\22\3\1\302\3\3"+
    "\3\0\2\3\2\0\6\3\31\0\1\303\31\0\3\3"+
    "\3\0\16\3\1\304\7\3\3\0\2\3\2\0\6\3"+
    "\45\0\1\305\15\0\3\3\3\0\26\3\3\0\1\3"+
    "\1\306\2\0\6\3\45\0\1\307\15\0\3\3\3\0"+
    "\26\3\3\0\1\3\1\310\2\0\6\3\51\0\1\311"+
    "\11\0\3\3\3\0\26\3\3\0\2\3\2\0\1\3"+
    "\1\312\4\3\51\0\1\313\11\0\3\3\3\0\26\3"+
    "\3\0\2\3\2\0\1\3\1\314\4\3\35\0\1\315"+
    "\25\0\3\3\3\0\22\3\1\316\3\3\3\0\2\3"+
    "\2\0\6\3\31\0\1\317\31\0\3\3\3\0\16\3"+
    "\1\320\7\3\3\0\2\3\2\0\6\3\17\0\1\321"+
    "\43\0\3\3\3\0\4\3\1\322\21\3\3\0\2\3"+
    "\2\0\6\3\14\0\1\321\46\0\3\3\3\0\1\3"+
    "\1\322\24\3\3\0\2\3\2\0\6\3\20\0\1\323"+
    "\42\0\3\3\3\0\5\3\1\324\20\3\3\0\2\3"+
    "\2\0\6\3\20\0\1\325\42\0\3\3\3\0\5\3"+
    "\1\326\20\3\3\0\2\3\2\0\6\3\15\0\1\327"+
    "\45\0\3\3\3\0\2\3\1\330\23\3\3\0\2\3"+
    "\2\0\6\3\15\0\1\331\45\0\3\3\3\0\2\3"+
    "\1\332\23\3\3\0\2\3\2\0\6\3\17\0\1\333"+
    "\43\0\3\3\3\0\4\3\1\334\21\3\3\0\2\3"+
    "\2\0\6\3\14\0\1\333\46\0\3\3\3\0\1\3"+
    "\1\334\24\3\3\0\2\3\2\0\6\3\16\0\1\335"+
    "\44\0\3\3\3\0\3\3\1\336\22\3\3\0\2\3"+
    "\2\0\6\3\16\0\1\337\44\0\3\3\3\0\3\3"+
    "\1\340\22\3\3\0\2\3\2\0\6\3\13\0\1\341"+
    "\47\0\3\3\3\0\1\342\25\3\3\0\2\3\2\0"+
    "\6\3\13\0\1\343\47\0\3\3\3\0\1\344\25\3"+
    "\3\0\2\3\2\0\6\3\35\0\1\345\25\0\3\3"+
    "\3\0\22\3\1\346\3\3\3\0\2\3\2\0\6\3"+
    "\35\0\1\347\25\0\3\3\3\0\22\3\1\350\3\3"+
    "\3\0\2\3\2\0\6\3\31\0\1\351\31\0\3\3"+
    "\3\0\16\3\1\352\7\3\3\0\2\3\2\0\6\3"+
    "\31\0\1\353\31\0\3\3\3\0\16\3\1\354\7\3"+
    "\3\0\2\3\2\0\6\3\17\0\1\355\43\0\3\3"+
    "\3\0\4\3\1\356\21\3\3\0\2\3\2\0\6\3"+
    "\17\0\1\357\43\0\3\3\3\0\4\3\1\360\21\3"+
    "\3\0\2\3\2\0\6\3\14\0\1\355\46\0\3\3"+
    "\3\0\1\3\1\356\24\3\3\0\2\3\2\0\6\3"+
    "\14\0\1\357\46\0\3\3\3\0\1\3\1\360\24\3"+
    "\3\0\2\3\2\0\6\3\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9982];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\24\1\1\11\1\1\2\0"+
    "\13\1\4\11\4\1\1\0\1\11\1\1\1\0\14\1"+
    "\1\0\14\1\1\0\13\1\1\11\21\1\1\0\1\1"+
    "\1\0\5\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	MatchProcessor mp = new MatchProcessor();
	public ArrayList<com.tpi.teoi.Symbol> get_result(){
	    return mp.get_result();
	}

	public ArrayList<String> get_rejected(){
    	    return mp.get_rejected();
    	}

    public ArrayList<com.tpi.teoi.Symbol> get_result_lexemas(){
	    return mp.get_result_lexemas();
	}	
    	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { mp.process_unmatch(yytext(), String.valueOf(yyline));
            } 
            // fall through
          case 25: break;
          case 2: 
            { mp.process_match("ID", yytext());
				return new Symbol(sym.ID,yytext();
            } 
            // fall through
          case 26: break;
          case 3: 
            { mp.process_match("CONST_INT", yytext());
				return new Symbol(sym.CONST_INT,yytext();
            } 
            // fall through
          case 27: break;
          case 4: 
            { mp.process_match("SIG_DIV", yytext());
				return new Symbol(sym.SIG_DIV,yytext();
            } 
            // fall through
          case 28: break;
          case 5: 
            { mp.process_match("SIG_MUL", yytext());
				return new Symbol(sym.SIG_MUL,yytext();
            } 
            // fall through
          case 29: break;
          case 6: 
            { mp.process_match("MAYOR", yytext());
				return new Symbol(sym.MAYOR,yytext();
            } 
            // fall through
          case 30: break;
          case 7: 
            { mp.process_match("IGUAL", yytext());
				return new Symbol(sym.IGUAL,yytext();
            } 
            // fall through
          case 31: break;
          case 8: 
            { mp.process_match("MENOR", yytext());
				return new Symbol(sym.MENOR,yytext();
            } 
            // fall through
          case 32: break;
          case 9: 
            { mp.process_match("SIG_MAS", yytext());
				return new Symbol(sym.SIG_MAS,yytext();
            } 
            // fall through
          case 33: break;
          case 10: 
            { mp.process_match("OR", yytext());
				return new Symbol(sym.OR,yytext();
            } 
            // fall through
          case 34: break;
          case 11: 
            { mp.process_match("MAYOR_I", yytext());
				return new Symbol(sym.MAYOR_I,yytext();
            } 
            // fall through
          case 35: break;
          case 12: 
            { mp.process_match("DISTINTO", yytext());
				return new Symbol(sym.DISTINTO,yytext();
            } 
            // fall through
          case 36: break;
          case 13: 
            { mp.process_match("MENOR_I", yytext());
				return new Symbol(sym.MENOR_I,yytext();
            } 
            // fall through
          case 37: break;
          case 14: 
            { mp.process_match("CONST_STRING", yytext());
				return new Symbol(sym.CONST_STRING,yytext();
            } 
            // fall through
          case 38: break;
          case 15: 
            { mp.process_match("CONST_FLOAT", yytext());
				return new Symbol(sym.CONST_FLOAT,yytext();
            } 
            // fall through
          case 39: break;
          case 16: 
            { mp.process_match("TYPE_INT", yytext());
				return new Symbol(sym.TYPE_INT,yytext();
            } 
            // fall through
          case 40: break;
          case 17: 
            { mp.process_match("AND", yytext());
				return new Symbol(sym.AND,yytext();
            } 
            // fall through
          case 41: break;
          case 18: 
            { mp.process_match("TYPE_FLOAT", yytext());
				return new Symbol(sym.CONST_FLOAT,yytext();
            } 
            // fall through
          case 42: break;
          case 19: 
            { /* IGNORE */
            } 
            // fall through
          case 43: break;
          case 20: 
            { mp.process_match("TYPE_STRING", yytext());
				return new Symbol(sym.CONST_STRING,yytext();
            } 
            // fall through
          case 44: break;
          case 21: 
            { mp.process_match("DEC", yytext());
				return new Symbol(sym.DEC,yytext();
            } 
            // fall through
          case 45: break;
          case 22: 
            { mp.process_match("START", yytext());
				return new Symbol(sym.START,yytext();
            } 
            // fall through
          case 46: break;
          case 23: 
            { mp.process_match("ENDDEC", yytext());
				return new Symbol(sym.ENDDEC,yytext();
            } 
            // fall through
          case 47: break;
          case 24: 
            { mp.process_match("FINALIZE", yytext());
				return new Symbol(sym.FINALIZE,yytext();

{IF}	            		{mp.process_match("IF", yytext());
				return new Symbol(sym.IF,yytext();}

{WHILE}	            		{mp.process_match("WHILE", yytext());
				return new Symbol(sym.WHILE,yytext();}

{TAKE}		           	{mp.process_match("TAKE", yytext());
				return new Symbol(sym.TAKE,yytext();}

{EXIT}                  	{mp.process_match("EXIT", yytext());
				return new Symbol(sym.EXIT,yytext();}

{ELSE}                 		{mp.process_match("ELSE", yytext());
				return new Symbol(sym.ELSE,yytext();}

/*  */

/* Simbolos */

{SQR_BRACKET_OPEN}		{mp.process_match("SQR_BRACKET_OPEN", yytext());
				return new Symbol(sym.SQR_BRACKET_OPEN,yytext();}

{SQR_BRACKET_CLOSE}     	{mp.process_match("SQR_BRACKET_CLOSE", yytext());
				return new Symbol(sym.SQR_BRACKET_CLOSE,yytext();}

{BRACKET_OPEN}		   	{mp.process_match("BRACKET_OPEN", yytext());
				return new Symbol(sym.BRACKET_OPEN,yytext();}

{BRACKET_CLOSE}         	{mp.process_match("BRACKET_CLOSE", yytext());
				return new Symbol(sym.BRACKET_CLOSE,yytext();}

{KEY_OPEN}		        {mp.process_match("KEY_OPEN", yytext());
				return new Symbol(sym.KEY_OPEN,yytext();}

{KEY_CLOSE}             	{mp.process_match("KEY_CLOSE", yytext());
				return new Symbol(sym.KEY_CLOSE,yytext();}

{OP_ASSIGN}	        	{mp.process_match("OP_ASSIGN", yytext());
				return new Symbol(sym.OP_ASSIGN,yytext();}

{OP_DECLARE}	       		{mp.process_match("OP_DECLARE", yytext());
				return new Symbol(sym.OP_DECLARE,yytext();}

{COMA}                 		{mp.process_match("COMA", yytext());
				return new Symbol(sym.COMA,yytext();}

{PUNTO_Y_COMA}          	{mp.process_match("PUNTO_Y_COMA", yytext());
				return new Symbol(sym.PUNTO_Y_COMA,yytext();}
				

{EspacioBlanco}			{ /* ignore */ }

{SIG_MENOS}             	{mp.process_match("SIG_MENOS", yytext());
				return new Symbol(sym.SIG_MENOS,yytext();}
            } 
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
