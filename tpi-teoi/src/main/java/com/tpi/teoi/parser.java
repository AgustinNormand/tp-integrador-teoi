
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.tpi.teoi;

import java.util.ArrayList;
import java_cup.runtime.*;
import java.util.*;
import java.util.List;
import javax.swing.*;
import com.tpi.ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\004\000\002\005\005" +
    "\000\002\006\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\007\005\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\011\005\000\002\012" +
    "\004\000\002\012\003\000\002\013\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\020\005\000\002\024\005\000\002\024" +
    "\007\000\002\025\005\000\002\027\005\000\002\026\003" +
    "\000\002\026\011\000\002\026\011\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\005\000\002\022\005\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\005\000\002\015\005\000\002\015\003\000\002\031" +
    "\014\000\002\014\005\000\002\014\003\000\002\031\014" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\027\005\001\002\000\004\031\044\001" +
    "\002\000\004\050\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\006\030\041\050\011\001" +
    "\002\000\004\061\040\001\002\000\006\030\ufffe\050\ufffe" +
    "\001\002\000\006\044\014\051\016\001\002\000\004\061" +
    "\030\001\002\000\010\014\023\015\022\016\021\001\002" +
    "\000\004\057\017\001\002\000\004\050\020\001\002\000" +
    "\010\014\ufff7\015\ufff7\016\ufff7\001\002\000\004\051\027" +
    "\001\002\000\004\051\026\001\002\000\004\051\025\001" +
    "\002\000\006\030\ufffc\050\ufffc\001\002\000\006\030\ufffa" +
    "\050\ufffa\001\002\000\006\030\ufff8\050\ufff8\001\002\000" +
    "\006\030\ufff9\050\ufff9\001\002\000\006\044\014\051\016" +
    "\001\002\000\010\014\034\015\033\016\032\001\002\000" +
    "\004\044\037\001\002\000\004\044\036\001\002\000\004" +
    "\044\035\001\002\000\010\014\ufff6\015\ufff6\016\ufff6\001" +
    "\002\000\010\014\ufff4\015\ufff4\016\ufff4\001\002\000\010" +
    "\014\ufff5\015\ufff5\016\ufff5\001\002\000\006\044\ufffb\051" +
    "\ufffb\001\002\000\004\031\uffff\001\002\000\006\030\ufffd" +
    "\050\ufffd\001\002\000\004\002\000\001\002\000\012\033" +
    "\052\034\045\036\046\061\053\001\002\000\004\052\135" +
    "\001\002\000\012\061\201\062\202\063\204\064\203\001" +
    "\002\000\016\032\ufff1\033\ufff1\034\ufff1\036\ufff1\055\ufff1" +
    "\061\ufff1\001\002\000\016\032\uffec\033\uffec\034\uffec\036" +
    "\uffec\055\uffec\061\uffec\001\002\000\016\032\uffee\033\uffee" +
    "\034\uffee\036\uffee\055\uffee\061\uffee\001\002\000\004\052" +
    "\135\001\002\000\004\056\061\001\002\000\016\032\uffed" +
    "\033\uffed\034\uffed\036\uffed\055\uffed\061\uffed\001\002\000" +
    "\014\032\057\033\052\034\045\036\046\061\053\001\002" +
    "\000\016\032\uffef\033\uffef\034\uffef\036\uffef\055\uffef\061" +
    "\uffef\001\002\000\004\002\ufff3\001\002\000\016\032\ufff2" +
    "\033\ufff2\034\ufff2\036\ufff2\055\ufff2\061\ufff2\001\002\000" +
    "\016\035\062\052\067\061\072\062\065\063\071\064\066" +
    "\001\002\000\004\052\106\001\002\000\044\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\053" +
    "\uffcf\055\uffcf\061\uffcf\001\002\000\044\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\036\uffd7\040\uffd7\041\uffd7\042\100\043\077\053\uffd7" +
    "\055\uffd7\061\uffd7\001\002\000\040\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\032\uffd6\033\uffd6\034\uffd6" +
    "\036\uffd6\040\uffd6\041\uffd6\053\uffd6\055\uffd6\061\uffd6\001" +
    "\002\000\044\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\053\uffd0\055\uffd0\061\uffd0\001\002" +
    "\000\016\035\062\052\067\061\072\062\065\063\071\064" +
    "\066\001\002\000\022\032\uffe7\033\uffe7\034\uffe7\036\uffe7" +
    "\040\074\041\075\055\uffe7\061\uffe7\001\002\000\044\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\053\uffd1\055\uffd1\061\uffd1\001\002\000\044\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\053\uffd2\055\uffd2\061\uffd2\001\002\000\044\021\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\053" +
    "\uffd5\055\uffd5\061\uffd5\001\002\000\014\035\062\052\067" +
    "\061\072\063\071\064\066\001\002\000\014\035\062\052" +
    "\067\061\072\063\071\064\066\001\002\000\044\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\036\uffd9\040\uffd9\041\uffd9\042\100\043\077" +
    "\053\uffd9\055\uffd9\061\uffd9\001\002\000\014\035\062\052" +
    "\067\061\072\063\071\064\066\001\002\000\014\035\062" +
    "\052\067\061\072\063\071\064\066\001\002\000\044\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\053\uffd3\055\uffd3\061\uffd3\001\002\000\044\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\053\uffd4\055\uffd4\061\uffd4\001\002\000\044\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\036\uffd8\040\uffd8\041\uffd8\042\100\043\077\053" +
    "\uffd8\055\uffd8\061\uffd8\001\002\000\010\040\074\041\075" +
    "\053\105\001\002\000\044\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\032\uffce\033\uffce\034\uffce\036\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\053\uffce\055\uffce\061" +
    "\uffce\001\002\000\006\040\107\041\110\001\002\000\004" +
    "\046\123\001\002\000\004\046\111\001\002\000\004\061" +
    "\112\001\002\000\004\046\113\001\002\000\004\050\114" +
    "\001\002\000\004\063\116\001\002\000\006\044\117\051" +
    "\120\001\002\000\006\044\uffcc\051\uffcc\001\002\000\004" +
    "\063\122\001\002\000\004\053\121\001\002\000\044\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\036\uffcb\040\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\053\uffcb\055\uffcb\061\uffcb\001\002\000\006\044\uffcd" +
    "\051\uffcd\001\002\000\004\061\124\001\002\000\004\046" +
    "\125\001\002\000\004\050\126\001\002\000\004\063\130" +
    "\001\002\000\006\044\131\051\132\001\002\000\006\044" +
    "\uffc9\051\uffc9\001\002\000\004\063\134\001\002\000\004" +
    "\053\133\001\002\000\044\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\053\uffc8\055\uffc8\061" +
    "\uffc8\001\002\000\006\044\uffca\051\uffca\001\002\000\016" +
    "\035\062\052\146\061\072\062\065\063\071\064\066\001" +
    "\002\000\004\054\140\001\002\000\020\032\uffe6\033\uffe6" +
    "\034\uffe6\036\uffe6\037\143\055\uffe6\061\uffe6\001\002\000" +
    "\012\033\052\034\045\036\046\061\053\001\002\000\014" +
    "\033\052\034\045\036\046\055\142\061\053\001\002\000" +
    "\020\032\ufff0\033\ufff0\034\ufff0\036\ufff0\037\ufff0\055\ufff0" +
    "\061\ufff0\001\002\000\004\054\140\001\002\000\016\032" +
    "\uffe5\033\uffe5\034\uffe5\036\uffe5\055\uffe5\061\uffe5\001\002" +
    "\000\004\053\uffe2\001\002\000\016\035\062\052\067\061" +
    "\072\062\065\063\071\064\066\001\002\000\022\021\153" +
    "\022\154\023\157\024\156\025\155\026\152\040\074\041" +
    "\075\001\002\000\004\053\151\001\002\000\004\054\uffe3" +
    "\001\002\000\016\035\062\052\067\061\072\062\065\063" +
    "\071\064\066\001\002\000\016\035\062\052\067\061\072" +
    "\062\065\063\071\064\066\001\002\000\016\035\062\052" +
    "\067\061\072\062\065\063\071\064\066\001\002\000\016" +
    "\035\062\052\067\061\072\062\065\063\071\064\066\001" +
    "\002\000\016\035\062\052\067\061\072\062\065\063\071" +
    "\064\066\001\002\000\016\035\062\052\067\061\072\062" +
    "\065\063\071\064\066\001\002\000\010\040\074\041\075" +
    "\053\uffdf\001\002\000\010\040\074\041\075\053\uffdb\001" +
    "\002\000\010\040\074\041\075\053\uffde\001\002\000\010" +
    "\040\074\041\075\053\uffdc\001\002\000\010\040\074\041" +
    "\075\053\uffdd\001\002\000\010\040\074\041\075\053\uffda" +
    "\001\002\000\004\053\170\001\002\000\024\021\153\022" +
    "\154\023\157\024\156\025\155\026\152\040\074\041\075" +
    "\053\105\001\002\000\006\017\171\020\172\001\002\000" +
    "\004\052\176\001\002\000\004\052\173\001\002\000\016" +
    "\035\062\052\067\061\072\062\065\063\071\064\066\001" +
    "\002\000\004\053\175\001\002\000\004\053\uffe0\001\002" +
    "\000\016\035\062\052\067\061\072\062\065\063\071\064" +
    "\066\001\002\000\004\053\200\001\002\000\004\053\uffe1" +
    "\001\002\000\016\032\uffe8\033\uffe8\034\uffe8\036\uffe8\055" +
    "\uffe8\061\uffe8\001\002\000\016\032\uffe9\033\uffe9\034\uffe9" +
    "\036\uffe9\055\uffe9\061\uffe9\001\002\000\016\032\uffeb\033" +
    "\uffeb\034\uffeb\036\uffeb\055\uffeb\061\uffeb\001\002\000\016" +
    "\032\uffea\033\uffea\034\uffea\036\uffea\055\uffea\061\uffea\001" +
    "\002\000\004\054\140\001\002\000\016\032\uffe4\033\uffe4" +
    "\034\uffe4\036\uffe4\055\uffe4\061\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\002\005\003\003\001\001\000\004\011" +
    "\042\001\001\000\010\004\007\005\011\006\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\041\006" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\014\001\001\000\002\001\001\000\004\010\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\054\016\046\017\055\020\050\024\047\025" +
    "\053\001\001\000\004\027\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\057\017\055\020\050\024\047\025\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\067\022\063\023\072\031\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\103\022\063\023" +
    "\072\031\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\102\023" +
    "\072\031\062\001\001\000\010\022\075\023\072\031\062" +
    "\001\001\000\002\001\001\000\006\023\101\031\062\001" +
    "\001\000\006\023\100\031\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\146\022" +
    "\063\023\072\026\147\030\144\031\062\001\001\000\004" +
    "\013\136\001\001\000\002\001\001\000\016\012\140\016" +
    "\046\017\055\020\050\024\047\025\053\001\001\000\014" +
    "\016\057\017\055\020\050\024\047\025\053\001\001\000" +
    "\002\001\001\000\004\013\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\021\166\022\063\023\072\030" +
    "\165\031\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\164\022\063\023\072\031" +
    "\062\001\001\000\012\021\163\022\063\023\072\031\062" +
    "\001\001\000\012\021\162\022\063\023\072\031\062\001" +
    "\001\000\012\021\161\022\063\023\072\031\062\001\001" +
    "\000\012\021\160\022\063\023\072\031\062\001\001\000" +
    "\012\021\157\022\063\023\072\031\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\146\022\063\023\072\030\173" +
    "\031\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\021\146\022\063\023\072\030\176\031\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\205\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



ArrayList<String> listaReglas = new ArrayList<String>();

/**METODO AL QUE SE LLAMA AUTOMATICAMENTE ANTE ALGUN ERROR SINTACTICO*/
public void syntax_error(Symbol s){
    JOptionPane.showMessageDialog(null, "Error. No reconocio el valor: " + s.value);
}

public Nodo padre;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


//public String resultado = "";
//public int contadorAvg = 0;

public List<NodoSentencia> a ;
public List<NodoSentencia> sentencias_take ;

public List<Integer> lista;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= comienzo_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // comienzo_programa ::= declaracion_programa programa 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoPrograma p = (NodoPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" Comienzo_programa Regla [0] compila, llega a start"); 
  listaReglas.add("Comienzo_programa Regla [0] compila, START");
  RESULT = p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienzo_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracion_programa ::= DEC bloque_definicion ENDDEC 
            {
              Object RESULT =null;
		System.out.println(" Declaracion_programa regla[1]"); 
													listaReglas.add("Declaracion_programa regla[1]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_definicion ::= renglon_definicion 
            {
              Object RESULT =null;
		System.out.println(" bloque_definicion regla[2]");
													listaReglas.add("bloque_definicion regla[2]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_definicion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_definicion ::= bloque_definicion renglon_definicion 
            {
              Object RESULT =null;
		System.out.println(" bloque_definicion regla[3]");
													listaReglas.add("bloque_definicion regla[3]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_definicion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // renglon_definicion ::= inicial separador final 
            {
              Object RESULT =null;
		System.out.println(" renglon_definicion regla[4]");
													listaReglas.add("renglon_definicion regla[4]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renglon_definicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicial ::= SQR_BRACKET_OPEN ID 
            {
              Object RESULT =null;
		System.out.println(" inicial regla[5]");
								listaReglas.add("inicial regla[5]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // final ::= TYPE_INT SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		System.out.println(" final regla[6]");
										listaReglas.add(" final regla[6]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // final ::= TYPE_FLOAT SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		System.out.println(" final regla[7]");
										listaReglas.add("final regla[7]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // final ::= TYPE_STRING SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		System.out.println(" final regla[8]");
										listaReglas.add("final regla[8]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // separador ::= SQR_BRACKET_CLOSE OP_DECLARE SQR_BRACKET_OPEN 
            {
              Object RESULT =null;
		System.out.println(" separador regla[9]");
															listaReglas.add("separador regla[9]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // separador ::= COMA ID separador TYPE_INT COMA 
            {
              Object RESULT =null;
		System.out.println(" separador int regla[10]"); listaReglas.add(" separador int regla[10]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // separador ::= COMA ID separador TYPE_FLOAT COMA 
            {
              Object RESULT =null;
		System.out.println(" separador float float regla[10]"); listaReglas.add(" separador float regla[10]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // separador ::= COMA ID separador TYPE_STRING COMA 
            {
              Object RESULT =null;
		System.out.println(" separador string regla[10]"); listaReglas.add(" separador string regla[10]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // programa ::= START lista_de_sentencias FINALIZE 
            {
              NodoPrograma RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
  System.out.println(" programa regla[11]");
	listaReglas.add("programa regla[11]");
	RESULT = new NodoPrograma(s);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_de_sentencias ::= lista_de_sentencias sentencia 
            {
              List<NodoSentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> ss = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" lista de sentencias regla[12]");
	listaReglas.add("lista de sentencias regla[12]");
	ss.add(s);
  RESULT = ss;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_de_sentencias ::= sentencia 
            {
              List<NodoSentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" lista de sentencias-sentencia regla[13]");
	listaReglas.add(" lista de sentencias-sentencia regla[13]");
	a = new ArrayList<NodoSentencia>();
	a.add(s);
	RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque_sentencias ::= KEY_OPEN lista_de_sentencias KEY_CLOSE 
            {
              List<NodoSentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> ss = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
  System.out.println(" bloque_sentencias regla[15]");
  listaReglas.add("bloque_Sentencias regla [15]");
  RESULT = ss;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= write 
            {
              NodoSentencia RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia w = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" sentencia-write regla[17]");
	listaReglas.add("sentencia-write regla[17]");
	RESULT = w;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= asignacion 
            {
              NodoSentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoAsignacion a = (NodoAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" sentencia-asignacion regla[16]");
  listaReglas.add("sentencia-asignacion regla[16]");
  RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= iteracion 
            {
              NodoSentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoWhile i = (NodoWhile)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" sentencia-iteracion regla[18]");
    listaReglas.add("sentencia-iteracion regla[18]");
    RESULT = i;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= seleccion 
            {
              NodoSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIf s = (NodoIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" sentencia-seleccion regla[19]");
	listaReglas.add("sentencia-seleccion regla[19]");
	RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // write ::= EXIT CONST_FLOAT 
            {
              NodoSentencia RESULT =null;
		int cte_floatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cte_floatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cte_float = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println("write regla[32]");
  listaReglas.add("write float regla[32]");
  RESULT = new NodoWriteFloat(Float.parseFloat(cte_float));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // write ::= EXIT CONST_INT 
            {
              NodoSentencia RESULT =null;
		int cte_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cte_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cte_int = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println("write regla[32]");
  listaReglas.add("write int regla[32]");
  RESULT = new NodoWriteInt(Integer.parseInt(cte_int));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // write ::= EXIT CONST_STRING 
            {
              NodoSentencia RESULT =null;
		int cte_stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cte_stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cte_string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println("write regla[32]");
  listaReglas.add("write string regla[32]");
  RESULT = new NodoWriteString(cte_string);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // write ::= EXIT ID 
            {
              NodoSentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println("write regla[32]");
  listaReglas.add("write id regla[32]");
  RESULT = new NodoWriteId(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion ::= ID OP_ASSIGN expresion 
            {
              NodoAsignacion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" asignacion regla[20]");
	listaReglas.add("asignacion regla[20]");
	RESULT= new NodoAsignacion(new NodoIdentificador(id), e);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // seleccion ::= IF bloque_condicion bloque_sentencias 
            {
              NodoIf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" seleccion regla[21]");
  listaReglas.add("seleccion regla[21]");
  RESULT = new NodoIf(c, s, null);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // seleccion ::= IF bloque_condicion bloque_sentencias ELSE bloque_sentencias 
            {
              NodoIf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<NodoSentencia> b = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("seleccion regla[22]");
    listaReglas.add("seleccion regla[22]");
    RESULT = new NodoIf(c, s, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // iteracion ::= WHILE bloque_condicion bloque_sentencias 
            {
              NodoWhile RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" iteracion regla[23]");
    listaReglas.add("iteracion regla[23]");
    RESULT = new NodoWhile(c, s);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloque_condicion ::= BRACKET_OPEN condicion BRACKET_CLOSE 
            {
              NodoExpresionBooleana RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
  System.out.println(" bloque_condicion regla[14]");
	listaReglas.add("lista de sentencias regla[14]");
	RESULT = c;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoComparacion c = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" condicion regla[24]");
    listaReglas.add("condicion regla[24]");
    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= BRACKET_OPEN comparacion BRACKET_CLOSE AND BRACKET_OPEN comparacion BRACKET_CLOSE 
            {
              NodoExpresionBooleana RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoComparacion a = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoComparacion b = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(" condicion regla[25]");
    listaReglas.add("condicion regla[25]");
    RESULT = new NodoAnd(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= BRACKET_OPEN comparacion BRACKET_CLOSE OR BRACKET_OPEN comparacion BRACKET_CLOSE 
            {
              NodoExpresionBooleana RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoComparacion a = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoComparacion b = (NodoComparacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(" condicion regla[26]");
    listaReglas.add("condicion regla[26]");
    RESULT = new NodoOr(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= expresion MAYOR expresion 
            {
              NodoComparacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" comparacion regla[27]");
    listaReglas.add("comparacion regla[27]");
    RESULT = new NodoMayor(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparacion ::= expresion MENOR expresion 
            {
              NodoComparacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" comparacion regla[27]");
    listaReglas.add("comparacion regla[27]");
    RESULT = new NodoMenor(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparacion ::= expresion IGUAL expresion 
            {
              NodoComparacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" comparacion regla[27]");
    listaReglas.add("comparacion regla[27]");
    RESULT = new NodoIgual(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparacion ::= expresion DISTINTO expresion 
            {
              NodoComparacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" comparacion regla[27]");
    listaReglas.add("comparacion regla[27]");
    RESULT = new NodoDistinto(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparacion ::= expresion MAYOR_I expresion 
            {
              NodoComparacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" comparacion regla[27]");
    listaReglas.add("comparacion regla[27]");
    RESULT = new NodoMayorIgual(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparacion ::= expresion MENOR_I expresion 
            {
              NodoComparacion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" comparacion regla[27]");
    listaReglas.add("comparacion regla[27]");
    RESULT = new NodoMenorIgual(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion SIG_MAS termino 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println("expresion suma regla[29]"); 
  listaReglas.add("expresion suma regla[29]");
  RESULT = new NodoSuma(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion SIG_MENOS termino 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println("expresion resta regla[29]"); 
  listaReglas.add("expresion resta regla[29]");
  RESULT = new NodoResta(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= termino 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println("expresion termino regla[29]"); 
  listaReglas.add("expresion termino regla[29]");
  RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= CONST_STRING 
            {
              NodoExpresion RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println("expresion string regla[29]"); 
  listaReglas.add("expresion string regla[29]");
  RESULT = new NodoConstanteString(str);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= factor 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" termino factor regla[30]"); 
  listaReglas.add("termino factor regla[30]");
  RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino ::= termino SIG_MUL factor 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" termino multiplicacion regla[30]");
    listaReglas.add("termino multiplicacion regla[30]");
    RESULT = new NodoMultiplicacion(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termino ::= termino SIG_DIV factor 
            {
              NodoExpresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion a = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion b = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" termino division regla[30]");
    listaReglas.add("termino division regla[30]");
    RESULT = new NodoDivision(a, b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= ID 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" factor int regla[31]"); 
  listaReglas.add(" factor int regla[31]");
  RESULT =new NodoIdentificador(id);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= CONST_INT 
            {
              NodoExpresion RESULT =null;
		int cte_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cte_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cte_int = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" factor int regla[31]"); 
  listaReglas.add(" factor int regla[31]");
  RESULT = new NodoConstante(Integer.parseInt(cte_int));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= CONST_FLOAT 
            {
              NodoExpresion RESULT =null;
		int cte_floatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cte_floatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cte_float = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
  System.out.println(" factor float regla[31]"); 
  listaReglas.add(" factor float regla[31]");
  RESULT = new NodoConstanteFloat(Float.parseFloat(cte_float));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= take 
            {
              NodoExpresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoTake t = (NodoTake)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println(" factor take regla[31]");
    listaReglas.add(" factor take regla[31]");
    RESULT = t;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= BRACKET_OPEN expresion BRACKET_CLOSE 
            {
              NodoExpresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(" factor take regla[31]");
    listaReglas.add(" factor take regla[31]");
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista_constantes_suma ::= lista_constantes_suma COMA CONST_INT 
            {
              List<NodoSentencia> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoSentencia> c = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("lista_constantes regla[33]");
    listaReglas.add("lista_constantes regla[33]");

    NodoDistinto condicion = new NodoDistinto(new NodoIdentificador("contador"), new NodoConstante(0));

    NodoExpresionBinaria operacion_resultado_constante;
    operacion_resultado_constante = new NodoSuma(new NodoIdentificador("resultado"), new NodoConstante(Integer.parseInt(i)));
    NodoAsignacion asignacion_resultado_suma = new NodoAsignacion(new NodoIdentificador("resultado"), operacion_resultado_constante);

    NodoResta resta_contador = new NodoResta(new NodoIdentificador("contador"), new NodoConstante(1));
    NodoAsignacion asignacion_contador = new NodoAsignacion(new NodoIdentificador("contador"), resta_contador);

    List<NodoSentencia> lista_sentencias = new ArrayList<NodoSentencia>();

    lista_sentencias.add(asignacion_resultado_suma);
    lista_sentencias.add(asignacion_contador);

    c.add(new NodoIf(condicion, lista_sentencias, null));

    RESULT = c;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_constantes_suma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lista_constantes_suma ::= CONST_INT 
            {
              List<NodoSentencia> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("lista_constantes int regla[33]");
    listaReglas.add("lista_constantes int regla[33]");

    NodoDistinto condicion = new NodoDistinto(new NodoIdentificador("contador"), new NodoConstante(0));

    NodoExpresionBinaria operacion_resultado_constante;
    operacion_resultado_constante = new NodoSuma(new NodoIdentificador("resultado"), new NodoConstante(Integer.parseInt(i)));
    NodoAsignacion asignacion_resultado_suma = new NodoAsignacion(new NodoIdentificador("resultado"), operacion_resultado_constante);

    NodoResta resta_contador = new NodoResta(new NodoIdentificador("contador"), new NodoConstante(1));
    NodoAsignacion asignacion_contador = new NodoAsignacion(new NodoIdentificador("contador"), resta_contador);

    List<NodoSentencia> lista_sentencias = new ArrayList<NodoSentencia>();

    lista_sentencias.add(asignacion_resultado_suma);
    lista_sentencias.add(asignacion_contador);

    sentencias_take = new ArrayList<NodoSentencia>();
    sentencias_take.add(new NodoIf(condicion, lista_sentencias, null));

    RESULT = sentencias_take;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_constantes_suma",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // take ::= TAKE BRACKET_OPEN SIG_MAS PUNTO_Y_COMA ID PUNTO_Y_COMA SQR_BRACKET_OPEN lista_constantes_suma SQR_BRACKET_CLOSE BRACKET_CLOSE 
            {
              NodoTake RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoSentencia> lc = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    System.out.println("take regla[35]");
    listaReglas.add("take regla[35]");
    NodoAsignacion asignacion_id_constante = new NodoAsignacion(new NodoIdentificador("resultado"), new NodoConstante(0));
    NodoAsignacion asignacion_contador_id = new NodoAsignacion(new NodoIdentificador("contador"), new NodoIdentificador(i));
    lc.add(0, asignacion_contador_id);
    lc.add(0, asignacion_id_constante);
    RESULT = new NodoTake(lc);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("take",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_constantes_resta ::= lista_constantes_resta COMA CONST_INT 
            {
              List<NodoSentencia> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoSentencia> c = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("lista_constantes regla[33]");
    listaReglas.add("lista_constantes regla[33]");

    NodoDistinto condicion = new NodoDistinto(new NodoIdentificador("contador"), new NodoConstante(0));

    NodoExpresionBinaria operacion_resultado_constante;
    operacion_resultado_constante = new NodoResta(new NodoIdentificador("resultado"), new NodoConstante(Integer.parseInt(i)));
    NodoAsignacion asignacion_resultado_suma = new NodoAsignacion(new NodoIdentificador("resultado"), operacion_resultado_constante);

    NodoResta resta_contador = new NodoResta(new NodoIdentificador("contador"), new NodoConstante(1));
    NodoAsignacion asignacion_contador = new NodoAsignacion(new NodoIdentificador("contador"), resta_contador);

    List<NodoSentencia> lista_sentencias = new ArrayList<NodoSentencia>();

    lista_sentencias.add(asignacion_resultado_suma);
    lista_sentencias.add(asignacion_contador);

    c.add(new NodoIf(condicion, lista_sentencias, null));

    RESULT = c;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_constantes_resta",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista_constantes_resta ::= CONST_INT 
            {
              List<NodoSentencia> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("lista_constantes int regla[33]");
    listaReglas.add("lista_constantes int regla[33]");

    NodoDistinto condicion = new NodoDistinto(new NodoIdentificador("contador"), new NodoConstante(0));

    NodoExpresionBinaria operacion_resultado_constante;
    operacion_resultado_constante = new NodoResta(new NodoIdentificador("resultado"), new NodoConstante(Integer.parseInt(i)));
    NodoAsignacion asignacion_resultado_suma = new NodoAsignacion(new NodoIdentificador("resultado"), operacion_resultado_constante);

    NodoResta resta_contador = new NodoResta(new NodoIdentificador("contador"), new NodoConstante(1));
    NodoAsignacion asignacion_contador = new NodoAsignacion(new NodoIdentificador("contador"), resta_contador);

    List<NodoSentencia> lista_sentencias = new ArrayList<NodoSentencia>();

    lista_sentencias.add(asignacion_resultado_suma);
    lista_sentencias.add(asignacion_contador);

    sentencias_take = new ArrayList<NodoSentencia>();
    sentencias_take.add(new NodoIf(condicion, lista_sentencias, null));

    RESULT = sentencias_take;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_constantes_resta",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // take ::= TAKE BRACKET_OPEN SIG_MENOS PUNTO_Y_COMA ID PUNTO_Y_COMA SQR_BRACKET_OPEN lista_constantes_resta SQR_BRACKET_CLOSE BRACKET_CLOSE 
            {
              NodoTake RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoSentencia> lc = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    System.out.println("take regla[35]");
    listaReglas.add("take regla[35]");
    NodoAsignacion asignacion_id_constante = new NodoAsignacion(new NodoIdentificador("resultado"), new NodoConstante(0));
    NodoAsignacion asignacion_contador_id = new NodoAsignacion(new NodoIdentificador("contador"), new NodoIdentificador(i));
    lc.add(0, asignacion_contador_id);
    lc.add(0, asignacion_id_constante);
    RESULT = new NodoTake(lc);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("take",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
