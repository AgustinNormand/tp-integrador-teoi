
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.tpi.teoi;

import java.util.ArrayList;
import java_cup.runtime.*;
import java.util.*;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\004\000\002\005\005" +
    "\000\002\006\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\007\005\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\011\005\000\002\012" +
    "\003\000\002\012\004\000\002\014\005\000\002\016\005" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\017\005\000\002\020\005\000\002\020\007\000\002" +
    "\023\005\000\002\015\003\000\002\015\005\000\002\015" +
    "\005\000\002\024\005\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\031\005\000\002\031\003\000\002\030\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\004\033\005\001\002\000\004\035\044\001" +
    "\002\000\004\054\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\006\034\041\054\011\001" +
    "\002\000\004\004\040\001\002\000\006\034\ufffe\054\ufffe" +
    "\001\002\000\006\050\014\055\016\001\002\000\004\004" +
    "\030\001\002\000\010\020\023\021\022\022\021\001\002" +
    "\000\004\063\017\001\002\000\004\054\020\001\002\000" +
    "\010\020\ufff7\021\ufff7\022\ufff7\001\002\000\004\055\027" +
    "\001\002\000\004\055\026\001\002\000\004\055\025\001" +
    "\002\000\006\034\ufffc\054\ufffc\001\002\000\006\034\ufffa" +
    "\054\ufffa\001\002\000\006\034\ufff8\054\ufff8\001\002\000" +
    "\006\034\ufff9\054\ufff9\001\002\000\006\050\014\055\016" +
    "\001\002\000\010\020\034\021\033\022\032\001\002\000" +
    "\004\050\037\001\002\000\004\050\036\001\002\000\004" +
    "\050\035\001\002\000\010\020\ufff6\021\ufff6\022\ufff6\001" +
    "\002\000\010\020\ufff4\021\ufff4\022\ufff4\001\002\000\010" +
    "\020\ufff5\021\ufff5\022\ufff5\001\002\000\006\050\ufffb\055" +
    "\ufffb\001\002\000\004\035\uffff\001\002\000\006\034\ufffd" +
    "\054\ufffd\001\002\000\004\002\000\001\002\000\010\004" +
    "\045\037\053\040\051\001\002\000\004\062\147\001\002" +
    "\000\014\004\uffec\036\uffec\037\uffec\040\uffec\055\uffec\001" +
    "\002\000\014\004\uffed\036\uffed\037\uffed\040\uffed\055\uffed" +
    "\001\002\000\014\004\ufff2\036\ufff2\037\ufff2\040\ufff2\055" +
    "\ufff2\001\002\000\004\056\055\001\002\000\012\004\045" +
    "\036\144\037\053\040\051\001\002\000\004\056\055\001" +
    "\002\000\014\004\uffee\036\uffee\037\uffee\040\uffee\055\uffee" +
    "\001\002\000\014\004\076\015\075\017\072\041\066\056" +
    "\073\001\002\000\004\054\060\001\002\000\016\004\uffea" +
    "\036\uffea\037\uffea\040\uffea\043\064\055\uffea\001\002\000" +
    "\010\004\045\037\053\040\051\001\002\000\012\004\045" +
    "\037\053\040\051\055\063\001\002\000\014\004\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\055\ufff1\001\002\000\016\004\uffef" +
    "\036\uffef\037\uffef\040\uffef\043\uffef\055\uffef\001\002\000" +
    "\004\054\060\001\002\000\014\004\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\055\uffe9\001\002\000\004\056\130\001\002\000" +
    "\046\004\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\036\uffd3\037\uffd3\040\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\055\uffd3\057\uffd3\001\002" +
    "\000\046\004\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\044\uffdb\045\uffdb\046\115\047\114\055\uffdb\057\uffdb\001" +
    "\002\000\010\023\124\024\125\057\uffe7\001\002\000\046" +
    "\004\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\036\uffd5\037\uffd5\040\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\055\uffd5\057\uffd5\001\002\000" +
    "\014\004\076\015\075\017\072\041\066\056\073\001\002" +
    "\000\022\025\106\026\110\027\105\030\111\031\103\032" +
    "\102\044\107\045\112\001\002\000\046\004\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\055\uffd4\057\uffd4\001\002\000\046\004\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\036\uffd6\037\uffd6\040\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\055\uffd6\057\uffd6\001\002\000\046\004\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\036\uffd8\037\uffd8\040\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\055\uffd8\057\uffd8\001\002\000\004\057" +
    "\101\001\002\000\004\054\ufff0\001\002\000\014\004\uffe0" +
    "\015\uffe0\017\uffe0\041\uffe0\056\uffe0\001\002\000\014\004" +
    "\uffe1\015\uffe1\017\uffe1\041\uffe1\056\uffe1\001\002\000\014" +
    "\004\076\015\075\017\072\041\066\056\073\001\002\000" +
    "\014\004\uffe3\015\uffe3\017\uffe3\041\uffe3\056\uffe3\001\002" +
    "\000\014\004\uffdf\015\uffdf\017\uffdf\041\uffdf\056\uffdf\001" +
    "\002\000\014\004\076\015\075\017\072\041\066\056\073" +
    "\001\002\000\014\004\uffde\015\uffde\017\uffde\041\uffde\056" +
    "\uffde\001\002\000\014\004\uffe2\015\uffe2\017\uffe2\041\uffe2" +
    "\056\uffe2\001\002\000\014\004\076\015\075\017\072\041" +
    "\066\056\073\001\002\000\046\004\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\044\uffdd\045\uffdd\046\115\047\114" +
    "\055\uffdd\057\uffdd\001\002\000\014\004\076\015\075\017" +
    "\072\041\066\056\073\001\002\000\014\004\076\015\075" +
    "\017\072\041\066\056\073\001\002\000\046\004\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\036\uffd9\037\uffd9\040\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\055\uffd9\057\uffd9\001\002\000\046\004\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\036\uffda\037\uffda\040\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\055\uffda\057\uffda\001\002\000\046\004" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\036\uffdc\037\uffdc\040\uffdc\044\uffdc\045" +
    "\uffdc\046\115\047\114\055\uffdc\057\uffdc\001\002\000\014" +
    "\023\uffe4\024\uffe4\044\107\045\112\057\uffe4\001\002\000" +
    "\010\044\107\045\112\057\123\001\002\000\046\004\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\036\uffd7\037\uffd7\040\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\055\uffd7\057\uffd7\001\002\000\014\004" +
    "\076\015\075\017\072\041\066\056\073\001\002\000\014" +
    "\004\076\015\075\017\072\041\066\056\073\001\002\000" +
    "\004\057\uffe5\001\002\000\004\057\uffe6\001\002\000\004" +
    "\045\131\001\002\000\004\052\132\001\002\000\004\004" +
    "\133\001\002\000\004\052\134\001\002\000\004\054\135" +
    "\001\002\000\004\015\136\001\002\000\006\050\uffcd\055" +
    "\uffcd\001\002\000\006\050\140\055\141\001\002\000\004" +
    "\015\143\001\002\000\004\057\142\001\002\000\046\004" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\036\uffcc\037\uffcc\040\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\055\uffcc\057\uffcc\001\002\000\006" +
    "\050\uffce\055\uffce\001\002\000\004\002\ufff3\001\002\000" +
    "\004\054\060\001\002\000\014\004\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\055\uffe8\001\002\000\014\004\076\015\075\017" +
    "\072\041\066\056\073\001\002\000\020\004\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\044\107\045\112\055\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\006\002\005\003\003\001\001\000\004\011" +
    "\042\001\001\000\010\004\007\005\011\006\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\041\006" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\014\001\001\000\002\001\001\000\004\010\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\012\051\013\047\017\053\020\045\023\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\144\001\001\000\012\013" +
    "\061\017\053\020\045\023\046\001\001\000\004\014\055" +
    "\001\001\000\002\001\001\000\016\015\077\022\073\024" +
    "\070\026\067\027\076\030\066\001\001\000\004\016\056" +
    "\001\001\000\002\001\001\000\014\012\060\013\047\017" +
    "\053\020\045\023\046\001\001\000\012\013\061\017\053" +
    "\020\045\023\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\121\026\067\027\076" +
    "\030\066\001\001\000\004\025\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\120\026\067\027\076\030\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\117\027\076\030" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\026\112\027\076\030\066\001\001\000\002\001\001\000" +
    "\006\027\116\030\066\001\001\000\006\027\115\030\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\073\024\126\026\067\027\076\030\066\001" +
    "\001\000\014\022\073\024\125\026\067\027\076\030\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\145\001\001\000\002\001\001\000\012\022\147" +
    "\026\067\027\076\030\066\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/**METODO AL QUE SE LLAMA AUTOMATICAMENTE ANTE ALGUN ERROR SINTACTICO*/
 	
 	public void sintax(Symbol s){
 		System.out.println("Error en linea la " + (s.right+1) + "columna" +s.left + ". " +
 		s + "no reconocio. valor" + s.value);
 	} 
 	MatchProcessorSintactico mps = new MatchProcessorSintactico();
	public String getResultGcl(){
		return mps.toString();
 	}

 	
 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= comienzo_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // comienzo_programa ::= declaracion_programa programa 
            {
              Object RESULT =null;
		mps.addString("comienzo_programa Compila correctamente 																				llegando al simbolo start");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienzo_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracion_programa ::= DEC bloque_definicion ENDDEC 
            {
              Object RESULT =null;
		mps.addString(" Declaracion_programa regla[1]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_definicion ::= renglon_definicion 
            {
              Object RESULT =null;
		mps.addString(" bloque_definicion regla[2]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_definicion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_definicion ::= bloque_definicion renglon_definicion 
            {
              Object RESULT =null;
		mps.addString(" bloque_definicion regla[3]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_definicion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // renglon_definicion ::= inicial separador final 
            {
              Object RESULT =null;
		mps.addString(" renglon_definicion regla[4]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renglon_definicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicial ::= SQR_BRACKET_OPEN ID 
            {
              Object RESULT =null;
		mps.addString(" inicial regla[5]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // final ::= TYPE_INT SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		mps.addString(" final regla[6]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // final ::= TYPE_FLOAT SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		mps.addString(" final regla[7]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // final ::= TYPE_STRING SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		mps.addString(" final regla[8]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // separador ::= SQR_BRACKET_CLOSE OP_DECLARE SQR_BRACKET_OPEN 
            {
              Object RESULT =null;
		mps.addString(" bloque_definicion regla[9]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // separador ::= COMA ID separador TYPE_INT COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // separador ::= COMA ID separador TYPE_FLOAT COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // separador ::= COMA ID separador TYPE_STRING COMA 
            {
              Object RESULT =null;
		mps.addString(" separador regla[10]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // programa ::= START lista_de_sentencias FINALIZE 
            {
              Object RESULT =null;
		mps.addString(" programa regla[11]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_de_sentencias ::= sentencia 
            {
              Object RESULT =null;
		mps.addString(" lista de sentencias sentencia regla[12]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_de_sentencias ::= lista_de_sentencias sentencia 
            {
              Object RESULT =null;
		mps.addString(" lista de sentencias regla[13]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque_condicion ::= BRACKET_OPEN condicion BRACKET_CLOSE 
            {
              Object RESULT =null;
		mps.addString(" bloque_condicion regla[14]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_condicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque_sentencias ::= SQR_BRACKET_OPEN lista_de_sentencias SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		mps.addString(" bloque_sentencias regla[16]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		mps.addString(" sentencia regla[17]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= iteracion 
            {
              Object RESULT =null;
		mps.addString(" senetencia regla[18]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= seleccion 
            {
              Object RESULT =null;
		mps.addString(" sentencia regla[19]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= ID OP_ASSIGN expresion 
            {
              Object RESULT =null;
		mps.addString(" asignacion regla[20]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // seleccion ::= IF bloque_condicion bloque_sentencias 
            {
              Object RESULT =null;
		mps.addString(" seleccion regla[21]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // seleccion ::= IF bloque_condicion bloque_sentencias ELSE bloque_sentencias 
            {
              Object RESULT =null;
		mps.addString("seleccion regla[22]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // iteracion ::= WHILE bloque_condicion bloque_sentencias 
            {
              Object RESULT =null;
		mps.addString(" iteracionregla[23]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condicion ::= comparacion 
            {
              Object RESULT =null;
		mps.addString(" condicion regla[24]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= comparacion AND comparacion 
            {
              Object RESULT =null;
		mps.addString(" condicionregla[25]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= comparacion OR comparacion 
            {
              Object RESULT =null;
		mps.addString(" condicion regla[26]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparacion ::= expresion comparador expresion 
            {
              Object RESULT =null;
		mps.addString(" comparacion regla[27]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparador ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparador ::= MAYOR_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparador ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparador ::= MENOR_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= DISTINTO 
            {
              Object RESULT =null;
		mps.addString(" comparador regla[28]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion SIG_MAS termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion SIG_MENOS termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= termino 
            {
              Object RESULT =null;
		mps.addString("expresion regla[29]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= termino SIG_MUL factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termino ::= termino SIG_DIV factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termino ::= factor 
            {
              Object RESULT =null;
		mps.addString(" termino regla[30]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= BRACKET_OPEN expresion BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= CONST_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= CONST_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= take 
            {
              Object RESULT =null;
		mps.addString(" factor  regla[31]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // write ::= WRITE CONST_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // write ::= WRITE CONST_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // write ::= WRITE CONST_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // write ::= WRITE ID 
            {
              Object RESULT =null;
		mps.addString("write regla[32]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lista_constantes ::= lista_constantes COMA CONST_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_constantes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista_constantes ::= CONST_INT 
            {
              Object RESULT =null;
		mps.addString("lista_constantes regla[33]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_constantes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // take ::= TAKE BRACKET_OPEN SIG_MAS PUNTO_Y_COMA ID PUNTO_Y_COMA SQR_BRACKET_OPEN lista_constantes SQR_BRACKET_CLOSE BRACKET_CLOSE 
            {
              Object RESULT =null;
		mps.addString("lista_constantes regla[35]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("take",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
