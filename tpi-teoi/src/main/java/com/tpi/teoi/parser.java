
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.tpi.teoi;

import java.util.ArrayList;
import java_cup.runtime.*;
import java.util.*;
import java.util.List;

import javax.swing.JOptionPane;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\004\000\002\005\005" +
    "\000\002\006\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\007\005\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\011\005\000\002\012" +
    "\003\000\002\012\004\000\002\014\005\000\002\016\005" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\017\005\000\002\020\005\000\002" +
    "\020\007\000\002\023\005\000\002\015\003\000\002\015" +
    "\005\000\002\015\005\000\002\024\005\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\003\000\002\022\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\003\000\002\027\005" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\031\005\000\002\031" +
    "\003\000\002\030\014" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\033\005\001\002\000\004\035\044\001" +
    "\002\000\004\054\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\006\034\041\054\011\001" +
    "\002\000\004\004\040\001\002\000\006\034\ufffe\054\ufffe" +
    "\001\002\000\006\050\014\055\016\001\002\000\004\004" +
    "\030\001\002\000\010\020\023\021\022\022\021\001\002" +
    "\000\004\063\017\001\002\000\004\054\020\001\002\000" +
    "\010\020\ufff7\021\ufff7\022\ufff7\001\002\000\004\055\027" +
    "\001\002\000\004\055\026\001\002\000\004\055\025\001" +
    "\002\000\006\034\ufffc\054\ufffc\001\002\000\006\034\ufffa" +
    "\054\ufffa\001\002\000\006\034\ufff8\054\ufff8\001\002\000" +
    "\006\034\ufff9\054\ufff9\001\002\000\006\050\014\055\016" +
    "\001\002\000\010\020\034\021\033\022\032\001\002\000" +
    "\004\050\037\001\002\000\004\050\036\001\002\000\004" +
    "\050\035\001\002\000\010\020\ufff6\021\ufff6\022\ufff6\001" +
    "\002\000\010\020\ufff4\021\ufff4\022\ufff4\001\002\000\010" +
    "\020\ufff5\021\ufff5\022\ufff5\001\002\000\006\050\ufffb\055" +
    "\ufffb\001\002\000\004\035\uffff\001\002\000\006\034\ufffd" +
    "\054\ufffd\001\002\000\004\002\000\001\002\000\012\004" +
    "\053\037\052\040\045\042\046\001\002\000\004\056\122" +
    "\001\002\000\012\004\152\015\155\016\153\017\154\001" +
    "\002\000\016\004\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2" +
    "\061\ufff2\001\002\000\016\004\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\042\uffeb\061\uffeb\001\002\000\016\004\uffee\036\uffee" +
    "\037\uffee\040\uffee\042\uffee\061\uffee\001\002\000\004\056" +
    "\122\001\002\000\004\062\061\001\002\000\016\004\uffec" +
    "\036\uffec\037\uffec\040\uffec\042\uffec\061\uffec\001\002\000" +
    "\014\004\053\036\057\037\052\040\045\042\046\001\002" +
    "\000\016\004\uffed\036\uffed\037\uffed\040\uffed\042\uffed\061" +
    "\uffed\001\002\000\004\002\ufff3\001\002\000\016\004\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\042\ufff1\061\ufff1\001\002\000" +
    "\016\004\072\015\071\016\065\017\066\041\062\056\067" +
    "\001\002\000\004\056\106\001\002\000\050\004\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\057\uffd1\061\uffd1\001\002\000\050" +
    "\004\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9" +
    "\044\uffd9\045\uffd9\046\100\047\077\057\uffd9\061\uffd9\001" +
    "\002\000\044\004\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\036\uffda\037\uffda\040" +
    "\uffda\042\uffda\044\uffda\045\uffda\057\uffda\061\uffda\001\002" +
    "\000\050\004\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\042\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\057\uffd3\061" +
    "\uffd3\001\002\000\016\004\072\015\071\016\065\017\066" +
    "\041\062\056\067\001\002\000\022\004\uffea\036\uffea\037" +
    "\uffea\040\uffea\042\uffea\044\074\045\075\061\uffea\001\002" +
    "\000\050\004\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\042\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\057\uffd2\061" +
    "\uffd2\001\002\000\050\004\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\042\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\057\uffd4\061\uffd4\001\002\000\050\004\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\042\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\057\uffd6\061\uffd6\001\002\000\014\004\072" +
    "\015\071\017\066\041\062\056\067\001\002\000\014\004" +
    "\072\015\071\017\066\041\062\056\067\001\002\000\050" +
    "\004\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc" +
    "\044\uffdc\045\uffdc\046\100\047\077\057\uffdc\061\uffdc\001" +
    "\002\000\014\004\072\015\071\017\066\041\062\056\067" +
    "\001\002\000\014\004\072\015\071\017\066\041\062\056" +
    "\067\001\002\000\050\004\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\057\uffd7\061\uffd7\001\002\000\050\004\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\042\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\057\uffd8\061\uffd8\001\002\000\050\004\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\044\uffdb" +
    "\045\uffdb\046\100\047\077\057\uffdb\061\uffdb\001\002\000" +
    "\010\044\074\045\075\057\105\001\002\000\050\004\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\057\uffd5\061\uffd5\001\002\000" +
    "\004\045\107\001\002\000\004\052\110\001\002\000\004" +
    "\004\111\001\002\000\004\052\112\001\002\000\004\054" +
    "\113\001\002\000\004\015\114\001\002\000\006\050\uffcb" +
    "\055\uffcb\001\002\000\006\050\116\055\117\001\002\000" +
    "\004\015\121\001\002\000\004\057\120\001\002\000\050" +
    "\004\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\036\uffca\037\uffca\040\uffca\042\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\057\uffca\061\uffca\001" +
    "\002\000\006\050\uffcc\055\uffcc\001\002\000\016\004\072" +
    "\015\071\016\065\017\066\041\062\056\067\001\002\000" +
    "\004\060\125\001\002\000\020\004\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\042\uffe9\043\130\061\uffe9\001\002\000\012\004" +
    "\053\037\052\040\045\042\046\001\002\000\014\004\053" +
    "\037\052\040\045\042\046\061\127\001\002\000\020\004" +
    "\uffef\036\uffef\037\uffef\040\uffef\042\uffef\043\uffef\061\uffef" +
    "\001\002\000\004\060\125\001\002\000\016\004\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\042\uffe8\061\uffe8\001\002\000\010" +
    "\023\146\024\147\057\uffe6\001\002\000\022\025\142\026" +
    "\143\027\141\030\144\031\137\032\136\044\074\045\075" +
    "\001\002\000\004\057\135\001\002\000\004\060\ufff0\001" +
    "\002\000\016\004\uffdf\015\uffdf\016\uffdf\017\uffdf\041\uffdf" +
    "\056\uffdf\001\002\000\016\004\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\041\uffe0\056\uffe0\001\002\000\016\004\072\015\071" +
    "\016\065\017\066\041\062\056\067\001\002\000\016\004" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\041\uffe2\056\uffe2\001\002" +
    "\000\016\004\uffde\015\uffde\016\uffde\017\uffde\041\uffde\056" +
    "\uffde\001\002\000\016\004\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\041\uffdd\056\uffdd\001\002\000\016\004\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\041\uffe1\056\uffe1\001\002\000\014\023\uffe3" +
    "\024\uffe3\044\074\045\075\057\uffe3\001\002\000\016\004" +
    "\072\015\071\016\065\017\066\041\062\056\067\001\002" +
    "\000\016\004\072\015\071\016\065\017\066\041\062\056" +
    "\067\001\002\000\004\057\uffe4\001\002\000\004\057\uffe5" +
    "\001\002\000\016\004\uffcd\036\uffcd\037\uffcd\040\uffcd\042" +
    "\uffcd\061\uffcd\001\002\000\016\004\uffce\036\uffce\037\uffce" +
    "\040\uffce\042\uffce\061\uffce\001\002\000\016\004\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\042\uffd0\061\uffd0\001\002\000\016" +
    "\004\uffcf\036\uffcf\037\uffcf\040\uffcf\042\uffcf\061\uffcf\001" +
    "\002\000\004\060\125\001\002\000\016\004\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\042\uffe7\061\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\002\005\003\003\001\001\000\004\011" +
    "\042\001\001\000\010\004\007\005\011\006\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\041\006" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\014\001\001\000\002\001\001\000\004\010\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\054\013\046\017\050\020\047\021\055\023" +
    "\053\001\001\000\004\014\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\013\057\017\050\020\047\021\055\023\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\067\026\063\027\072\030\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\103\026\063\027" +
    "\072\030\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\102\027" +
    "\072\030\062\001\001\000\010\026\075\027\072\030\062" +
    "\001\001\000\002\001\001\000\006\027\101\030\062\001" +
    "\001\000\006\027\100\030\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\015\133\022\132\024\131\026\063\027\072" +
    "\030\062\001\001\000\004\016\123\001\001\000\002\001" +
    "\001\000\016\012\125\013\046\017\050\020\047\021\055" +
    "\023\053\001\001\000\014\013\057\017\050\020\047\021" +
    "\055\023\053\001\001\000\002\001\001\000\004\016\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\144\026\063\027" +
    "\072\030\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\022\132\024\150\026\063\027\072\030\062\001\001" +
    "\000\014\022\132\024\147\026\063\027\072\030\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\156\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	ArrayList<String> listaReglas = new ArrayList<String>();

	/**METODO AL QUE SE LLAMA AUTOMATICAMENTE ANTE ALGUN ERROR SINTACTICO*/
 	public void syntax_error(Symbol s){
		 System.out.println("HOLA SOY UN ERROR..............");
 		System.out.println("Error en linea la " + (s.right+1) + "columna" +s.left + ". " +
 		s + "no reconocio. valor" + s.value);
 		JOptionPane.showMessageDialog(null, "Error en linea la " + (s.right+1) + "columna" +s.left + ". " +
                s + "no reconocio. valor" + s.value);
 	} 

 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= comienzo_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // comienzo_programa ::= declaracion_programa programa 
            {
              Object RESULT =null;
		System.out.println(" Comienzo_programa Regla [0] compila, llega a start"); 
													listaReglas.add("Comienzo_programa Regla [0] compila, START");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comienzo_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracion_programa ::= DEC bloque_definicion ENDDEC 
            {
              Object RESULT =null;
		System.out.println(" Declaracion_programa regla[1]"); 
													listaReglas.add("Declaracion_programa regla[1]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque_definicion ::= renglon_definicion 
            {
              Object RESULT =null;
		System.out.println(" bloque_definicion regla[2]");
													listaReglas.add("bloque_definicion regla[2]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_definicion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_definicion ::= bloque_definicion renglon_definicion 
            {
              Object RESULT =null;
		System.out.println(" bloque_definicion regla[3]");
													listaReglas.add("bloque_definicion regla[3]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_definicion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // renglon_definicion ::= inicial separador final 
            {
              Object RESULT =null;
		System.out.println(" renglon_definicion regla[4]");
													listaReglas.add("renglon_definicion regla[4]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("renglon_definicion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicial ::= SQR_BRACKET_OPEN ID 
            {
              Object RESULT =null;
		System.out.println(" inicial regla[5]");
								listaReglas.add("inicial regla[5]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // final ::= TYPE_INT SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		System.out.println(" final regla[6]");
										listaReglas.add(" final regla[6]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // final ::= TYPE_FLOAT SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		System.out.println(" final regla[7]");
										listaReglas.add("final regla[7]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // final ::= TYPE_STRING SQR_BRACKET_CLOSE 
            {
              Object RESULT =null;
		System.out.println(" final regla[8]");
										listaReglas.add("final regla[8]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("final",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // separador ::= SQR_BRACKET_CLOSE OP_DECLARE SQR_BRACKET_OPEN 
            {
              Object RESULT =null;
		System.out.println(" separador regla[9]");
															listaReglas.add("separador regla[9]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // separador ::= COMA ID separador TYPE_INT COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // separador ::= COMA ID separador TYPE_FLOAT COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // separador ::= COMA ID separador TYPE_STRING COMA 
            {
              Object RESULT =null;
		System.out.println(" separador regla[10]");
																													listaReglas.add(" separador regla[10]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("separador",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // programa ::= START lista_de_sentencias FINALIZE 
            {
              Object RESULT =null;
		System.out.println(" programa regla[11]");
												listaReglas.add("programa regla[11]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lista_de_sentencias ::= sentencia 
            {
              Object RESULT =null;
		System.out.println(" lista de sentencias-sentencia regla[12]");
									listaReglas.add(" lista de sentencias-sentencia regla[12]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lista_de_sentencias ::= lista_de_sentencias sentencia 
            {
              Object RESULT =null;
		System.out.println(" lista de sentencias regla[13]");
														listaReglas.add("lista de sentencias regla[13]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_de_sentencias",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bloque_condicion ::= BRACKET_OPEN condicion BRACKET_CLOSE 
            {
              Object RESULT =null;
		System.out.println(" bloque_condicion regla[14]");
															listaReglas.add("lista de sentencias regla[14]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_condicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque_sentencias ::= KEY_OPEN lista_de_sentencias KEY_CLOSE 
            {
              Object RESULT =null;
		System.out.println(" bloque_sentencias regla[15]");
															  listaReglas.add("bloque_Sentencias regla [15]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_sentencias",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		System.out.println(" sentencia-asignacion regla[16]");
							listaReglas.add("sentencia-asignacion regla[16]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= write 
            {
              Object RESULT =null;
		System.out.println(" sentencia-write regla[17]");
					listaReglas.add("sentencia-write regla[17]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= iteracion 
            {
              Object RESULT =null;
		System.out.println(" sentencia-iteracion regla[18]");
						listaReglas.add("sentencia-iteracion regla[18]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= seleccion 
            {
              Object RESULT =null;
		System.out.println(" sentencia-seleccion regla[19]");
						listaReglas.add("sentencia-seleccion regla[19]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion ::= ID OP_ASSIGN expresion 
            {
              Object RESULT =null;
		System.out.println(" asignacion regla[20]");
									  listaReglas.add("asignacion regla[20]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // seleccion ::= IF bloque_condicion bloque_sentencias 
            {
              Object RESULT =null;
		System.out.println(" seleccion regla[21]");
													listaReglas.add("seleccion regla[21]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // seleccion ::= IF bloque_condicion bloque_sentencias ELSE bloque_sentencias 
            {
              Object RESULT =null;
		System.out.println("seleccion regla[22]");
																			listaReglas.add("seleccion regla[22]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // iteracion ::= WHILE bloque_condicion bloque_sentencias 
            {
              Object RESULT =null;
		System.out.println(" iteracion regla[23]");
														listaReglas.add("iteracion regla[23]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= comparacion 
            {
              Object RESULT =null;
		System.out.println(" condicion regla[24]");
						  listaReglas.add("condicion regla[24]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= comparacion AND comparacion 
            {
              Object RESULT =null;
		System.out.println(" condicion regla[25]");
										listaReglas.add("condicion regla[25]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= comparacion OR comparacion 
            {
              Object RESULT =null;
		System.out.println(" condicion regla[26]");
										listaReglas.add("condicion regla[26]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparacion ::= expresion comparador expresion 
            {
              Object RESULT =null;
		System.out.println(" comparacion regla[27]");
												listaReglas.add("comparacion regla[27]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparador ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparador ::= MAYOR_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparador ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparador ::= MENOR_I 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= DISTINTO 
            {
              Object RESULT =null;
		System.out.println(" comparador regla[28]");
																	listaReglas.add("comparador regla[28");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion SIG_MAS termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion SIG_MENOS termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= CONST_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= termino 
            {
              Object RESULT =null;
		System.out.println("expresion regla[29]");
																								listaReglas.add("expresion regla[29]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termino ::= termino SIG_MUL factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termino ::= termino SIG_DIV factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termino ::= factor 
            {
              Object RESULT =null;
		System.out.println(" termino regla[30]");
																		listaReglas.add("termino regla[30]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= BRACKET_OPEN expresion BRACKET_CLOSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= CONST_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= CONST_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= take 
            {
              Object RESULT =null;
		System.out.println(" factor regla[31]");
																					 listaReglas.add(" factor regla[31]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // write ::= EXIT CONST_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // write ::= EXIT CONST_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // write ::= EXIT CONST_STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // write ::= EXIT ID 
            {
              Object RESULT =null;
		System.out.println("write regla[32]");
																			listaReglas.add("write regla[32]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // lista_constantes ::= lista_constantes COMA CONST_INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_constantes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lista_constantes ::= CONST_INT 
            {
              Object RESULT =null;
		System.out.println("lista_constantes regla[33]");
																listaReglas.add("lista_constantes regla[33]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_constantes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // take ::= TAKE BRACKET_OPEN SIG_MAS PUNTO_Y_COMA ID PUNTO_Y_COMA SQR_BRACKET_OPEN lista_constantes SQR_BRACKET_CLOSE BRACKET_CLOSE 
            {
              Object RESULT =null;
		System.out.println("take regla[35]");
																listaReglas.add("take regla[35]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("take",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
