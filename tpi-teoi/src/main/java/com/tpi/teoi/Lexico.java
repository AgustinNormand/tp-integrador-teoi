/* The following code was generated by JFlex 1.7.0 */

package com.tpi.teoi;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import jflex.sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\42\1\43\1\42\1\42\22\0\1\4\1\0\1\65"+
    "\5\0\1\70\1\71\1\6\1\61\1\62\1\60\1\63\1\5\12\2"+
    "\1\74\1\64\1\37\1\36\1\35\2\0\1\26\1\1\1\45\1\34"+
    "\1\44\1\23\1\17\1\55\1\7\1\1\1\57\1\24\1\51\1\10"+
    "\1\25\1\50\1\1\1\16\1\15\1\11\2\1\1\54\3\1\1\66"+
    "\1\0\1\67\1\0\1\3\1\0\1\32\1\1\1\41\1\33\1\40"+
    "\1\27\1\22\1\53\1\12\1\1\1\56\1\30\1\47\1\13\1\31"+
    "\1\46\1\1\1\21\1\20\1\14\2\1\1\52\3\1\1\72\1\0"+
    "\1\73\7\0\1\43\u1fa2\0\1\43\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\16\2"+
    "\1\7\1\10\1\11\6\2\1\12\1\13\1\14\1\15"+
    "\1\1\1\16\1\17\1\20\1\21\1\22\1\23\1\1"+
    "\2\0\1\2\1\24\6\2\1\25\5\2\1\26\1\10"+
    "\1\27\1\30\12\2\1\0\1\31\1\32\1\0\1\33"+
    "\1\0\1\34\5\2\1\35\15\2\1\36\1\0\1\37"+
    "\10\2\1\40\10\2\1\0\2\2\1\41\10\2\1\42"+
    "\1\43\1\44\1\45\20\2\1\0\1\2\1\0\5\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\5\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\5\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\2\46\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\2\47\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\2\50\2\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\75\0\364\0\75\0\u0131"+
    "\0\u016e\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\75"+
    "\0\75\0\75\0\u06e9\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u0726\0\u0763\0\u07a0\0\u07dd\0\172\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\172\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\75\0\75\0\75\0\75\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u06e9\0\75\0\75\0\u0d1b\0\u0763\0\u0d58\0\172\0\u0d95"+
    "\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\172\0\u0ec6\0\u0f03\0\u0f40"+
    "\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\75\0\u11df\0\172\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\172\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\172\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4"+
    "\0\u1811\0\u184e\0\172\0\172\0\75\0\172\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98"+
    "\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068"+
    "\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250"+
    "\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438"+
    "\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620"+
    "\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808"+
    "\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8"+
    "\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0"+
    "\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8"+
    "\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190"+
    "\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378"+
    "\0\u33b5\0\u33f2\0\75\0\172\0\u342f\0\u346c\0\u34a9\0\u34e6"+
    "\0\u3523\0\u3560\0\u359d\0\u35da\0\75\0\172\0\u3617\0\u3654"+
    "\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c"+
    "\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa\0\75\0\172"+
    "\0\75\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\3\1\11\1\12\1\3\1\13\1\14\2\3\1\15"+
    "\2\3\1\16\1\3\1\17\1\20\1\21\1\3\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\3"+
    "\1\5\1\2\1\32\1\3\1\33\1\3\1\34\1\3"+
    "\1\35\1\3\1\36\3\3\1\37\1\40\1\41\1\2"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\76\0\3\3\3\0\26\3\3\0\2\3\2\0"+
    "\14\3\17\0\1\4\60\0\1\53\16\0\1\54\70\0"+
    "\3\3\3\0\1\3\1\55\12\3\1\56\11\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\17\3\1\57"+
    "\6\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\4\3\1\60\13\3\1\56\5\3\3\0\2\3\2\0"+
    "\14\3\16\0\3\3\3\0\23\3\1\61\2\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\2\3\1\62"+
    "\23\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\5\3\1\63\20\3\3\0\2\3\2\0\14\3\16\0"+
    "\3\3\3\0\15\3\1\64\10\3\3\0\2\3\2\0"+
    "\14\3\16\0\3\3\3\0\7\3\1\65\16\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\1\3\1\66"+
    "\24\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\21\3\1\67\4\3\3\0\2\3\2\0\14\3\16\0"+
    "\3\3\3\0\12\3\1\65\13\3\3\0\2\3\2\0"+
    "\14\3\16\0\3\3\3\0\4\3\1\70\21\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\26\3\3\0"+
    "\1\71\1\3\2\0\14\3\16\0\3\3\3\0\26\3"+
    "\3\0\2\3\2\0\1\72\13\3\53\0\1\73\74\0"+
    "\1\74\73\0\1\75\1\76\37\0\3\3\3\0\4\3"+
    "\1\77\14\3\1\100\4\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\1\3\1\101\13\3\1\102\10\3"+
    "\3\0\2\3\2\0\14\3\16\0\3\3\3\0\12\3"+
    "\1\103\13\3\3\0\2\3\2\0\14\3\16\0\3\3"+
    "\3\0\7\3\1\104\16\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\12\3\1\105\13\3\3\0\2\3"+
    "\2\0\7\3\1\106\4\3\16\0\3\3\3\0\7\3"+
    "\1\107\16\3\3\0\2\3\2\0\11\3\1\110\2\3"+
    "\17\0\1\4\73\0\2\111\1\0\1\111\2\0\26\111"+
    "\3\0\3\111\1\0\15\111\1\0\2\111\1\0\1\112"+
    "\45\0\1\113\35\0\1\114\2\0\1\115\100\0\1\116"+
    "\67\0\3\3\3\0\2\3\1\117\23\3\3\0\2\3"+
    "\2\0\14\3\16\0\3\3\3\0\26\3\3\0\2\3"+
    "\2\0\13\3\1\120\16\0\3\3\3\0\5\3\1\117"+
    "\20\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\26\3\3\0\2\3\2\0\12\3\1\121\1\3\16\0"+
    "\3\3\3\0\7\3\1\122\16\3\3\0\2\3\2\0"+
    "\14\3\16\0\3\3\3\0\12\3\1\123\13\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\16\3\1\124"+
    "\7\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\25\3\1\125\3\0\2\3\2\0\14\3\16\0\3\3"+
    "\3\0\22\3\1\126\3\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\24\3\1\125\1\3\3\0\2\3"+
    "\2\0\14\3\16\0\3\3\3\0\26\3\3\0\1\3"+
    "\1\127\2\0\14\3\16\0\3\3\3\0\26\3\3\0"+
    "\2\3\2\0\1\3\1\130\12\3\16\0\3\3\3\0"+
    "\24\3\1\131\1\3\3\0\2\3\2\0\14\3\16\0"+
    "\3\3\3\0\11\3\1\132\14\3\3\0\2\3\2\0"+
    "\14\3\16\0\3\3\3\0\25\3\1\133\3\0\2\3"+
    "\2\0\14\3\16\0\3\3\3\0\6\3\1\134\17\3"+
    "\3\0\2\3\2\0\14\3\16\0\3\3\3\0\22\3"+
    "\1\135\3\3\3\0\2\3\2\0\14\3\16\0\3\3"+
    "\3\0\16\3\1\136\7\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\3\3\1\137\22\3\3\0\2\3"+
    "\2\0\14\3\16\0\3\3\3\0\3\3\1\140\22\3"+
    "\3\0\2\3\2\0\14\3\16\0\3\3\3\0\1\141"+
    "\25\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\1\142\25\3\3\0\2\3\2\0\14\3\53\0\1\143"+
    "\37\0\2\116\1\0\1\116\1\0\1\144\26\116\3\0"+
    "\3\116\1\0\15\116\1\0\2\116\12\0\3\3\3\0"+
    "\26\3\3\0\2\3\2\0\1\145\13\3\16\0\3\3"+
    "\3\0\26\3\3\0\1\145\1\3\2\0\14\3\16\0"+
    "\3\3\3\0\1\146\25\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\3\3\1\147\22\3\3\0\2\3"+
    "\2\0\14\3\16\0\3\3\3\0\17\3\1\150\6\3"+
    "\3\0\2\3\2\0\14\3\16\0\3\3\3\0\23\3"+
    "\1\151\2\3\3\0\2\3\2\0\14\3\16\0\3\3"+
    "\3\0\21\3\1\152\4\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\15\3\1\153\10\3\3\0\2\3"+
    "\2\0\14\3\16\0\3\3\3\0\24\3\1\154\1\3"+
    "\3\0\2\3\2\0\2\3\1\155\11\3\16\0\3\3"+
    "\3\0\26\3\3\0\1\156\1\3\2\0\14\3\16\0"+
    "\3\3\3\0\25\3\1\157\3\0\2\3\2\0\4\3"+
    "\1\160\7\3\16\0\3\3\3\0\26\3\3\0\2\3"+
    "\2\0\1\156\13\3\16\0\3\3\3\0\13\3\1\161"+
    "\12\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\10\3\1\162\15\3\3\0\2\3\2\0\14\3\16\0"+
    "\3\3\3\0\5\3\1\163\20\3\3\0\2\3\2\0"+
    "\14\3\16\0\3\3\3\0\21\3\1\164\4\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\2\3\1\165"+
    "\23\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\15\3\1\166\10\3\3\0\2\3\2\0\14\3\22\0"+
    "\1\167\70\0\3\3\3\0\1\3\1\170\24\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\4\3\1\171"+
    "\21\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\2\3\1\172\23\3\3\0\2\3\2\0\14\3\16\0"+
    "\3\3\3\0\5\3\1\172\20\3\3\0\2\3\2\0"+
    "\14\3\16\0\3\3\3\0\23\3\1\173\2\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\17\3\1\174"+
    "\6\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\26\3\3\0\1\175\1\3\2\0\14\3\16\0\3\3"+
    "\3\0\12\3\1\176\13\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\26\3\3\0\2\3\2\0\1\177"+
    "\13\3\16\0\3\3\3\0\7\3\1\200\16\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\12\3\1\201"+
    "\13\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\7\3\1\202\16\3\3\0\2\3\2\0\14\3\16\0"+
    "\3\3\3\0\26\3\3\0\1\203\1\3\2\0\14\3"+
    "\16\0\3\3\3\0\26\3\3\0\1\204\1\3\2\0"+
    "\14\3\16\0\3\3\3\0\26\3\3\0\2\3\2\0"+
    "\1\203\13\3\16\0\3\3\3\0\26\3\3\0\2\3"+
    "\2\0\1\204\13\3\22\0\1\205\70\0\3\3\3\0"+
    "\10\3\1\206\15\3\3\0\2\3\2\0\14\3\16\0"+
    "\3\3\3\0\13\3\1\206\12\3\3\0\2\3\2\0"+
    "\14\3\16\0\3\3\3\0\12\3\1\207\13\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\7\3\1\210"+
    "\16\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\26\3\3\0\1\3\1\211\2\0\14\3\16\0\3\3"+
    "\3\0\22\3\1\212\3\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\26\3\3\0\2\3\2\0\1\3"+
    "\1\213\12\3\16\0\3\3\3\0\16\3\1\214\7\3"+
    "\3\0\2\3\2\0\14\3\16\0\3\3\3\0\23\3"+
    "\1\215\2\3\3\0\2\3\2\0\14\3\16\0\3\3"+
    "\3\0\17\3\1\216\6\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\26\3\3\0\1\217\1\3\2\0"+
    "\14\3\16\0\3\3\3\0\26\3\3\0\2\3\2\0"+
    "\1\220\13\3\16\0\3\3\3\0\21\3\1\221\4\3"+
    "\3\0\2\3\2\0\14\3\16\0\3\3\3\0\13\3"+
    "\1\222\12\3\3\0\2\3\2\0\14\3\16\0\3\3"+
    "\3\0\15\3\1\223\10\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\10\3\1\224\15\3\3\0\2\3"+
    "\2\0\14\3\16\0\3\3\3\0\26\3\3\0\2\3"+
    "\2\0\3\3\1\225\10\3\16\0\3\3\3\0\26\3"+
    "\3\0\2\3\2\0\5\3\1\226\6\3\15\0\1\227"+
    "\3\230\3\227\26\230\3\227\2\230\2\0\14\230\15\227"+
    "\1\231\3\232\3\231\26\232\3\231\2\232\2\0\14\232"+
    "\15\231\1\0\3\3\3\0\23\3\1\233\2\3\3\0"+
    "\2\3\2\0\14\3\16\0\3\3\3\0\12\3\1\234"+
    "\13\3\3\0\2\3\2\0\14\3\16\0\3\3\3\0"+
    "\17\3\1\235\6\3\3\0\2\3\2\0\14\3\16\0"+
    "\3\3\3\0\7\3\1\236\16\3\3\0\2\3\2\0"+
    "\14\3\15\0\1\237\3\240\3\237\26\240\3\237\2\240"+
    "\2\0\14\240\15\237\1\241\3\242\3\241\26\242\3\241"+
    "\2\242\2\0\14\242\15\241\20\0\1\243\55\0\3\3"+
    "\3\0\11\3\1\244\14\3\3\0\2\3\2\0\14\3"+
    "\32\0\1\245\60\0\3\3\3\0\6\3\1\246\17\3"+
    "\3\0\2\3\2\0\14\3\16\0\3\3\3\0\12\3"+
    "\1\247\13\3\3\0\2\3\2\0\14\3\16\0\3\3"+
    "\3\0\23\3\1\250\2\3\3\0\2\3\2\0\14\3"+
    "\16\0\3\3\3\0\7\3\1\251\16\3\3\0\2\3"+
    "\2\0\14\3\16\0\3\3\3\0\17\3\1\252\6\3"+
    "\3\0\2\3\2\0\14\3\35\0\1\253\55\0\3\3"+
    "\3\0\11\3\1\254\14\3\3\0\2\3\2\0\14\3"+
    "\32\0\1\255\60\0\3\3\3\0\6\3\1\256\17\3"+
    "\3\0\2\3\2\0\14\3\55\0\1\257\35\0\3\3"+
    "\3\0\26\3\3\0\1\260\1\3\2\0\14\3\61\0"+
    "\1\261\31\0\3\3\3\0\26\3\3\0\2\3\2\0"+
    "\1\262\13\3\16\0\3\3\3\0\26\3\3\0\1\263"+
    "\1\3\2\0\14\3\16\0\3\3\3\0\26\3\3\0"+
    "\2\3\2\0\3\3\1\264\10\3\16\0\3\3\3\0"+
    "\26\3\3\0\2\3\2\0\1\265\13\3\16\0\3\3"+
    "\3\0\26\3\3\0\2\3\2\0\5\3\1\266\6\3"+
    "\55\0\1\267\35\0\3\3\3\0\26\3\3\0\1\270"+
    "\1\3\2\0\14\3\61\0\1\271\31\0\3\3\3\0"+
    "\26\3\3\0\2\3\2\0\1\272\13\3\56\0\1\273"+
    "\34\0\3\3\3\0\26\3\3\0\1\3\1\274\2\0"+
    "\14\3\62\0\1\275\30\0\3\3\3\0\26\3\3\0"+
    "\2\3\2\0\1\3\1\276\12\3\15\0\1\277\3\300"+
    "\3\277\26\300\3\277\2\300\2\0\14\300\15\277\1\301"+
    "\3\302\3\301\26\302\3\301\2\302\2\0\14\302\15\301"+
    "\1\303\3\304\3\303\26\304\3\303\2\304\2\0\14\304"+
    "\15\303\1\305\3\306\3\305\26\306\3\305\2\306\2\0"+
    "\14\306\15\305\41\0\1\307\34\0\3\3\3\0\26\3"+
    "\3\0\1\3\1\310\2\0\14\3\62\0\1\311\30\0"+
    "\3\3\3\0\26\3\3\0\2\3\2\0\1\3\1\312"+
    "\12\3\31\0\1\313\61\0\3\3\3\0\5\3\1\314"+
    "\20\3\3\0\2\3\2\0\14\3\26\0\1\315\64\0"+
    "\3\3\3\0\2\3\1\316\23\3\3\0\2\3\2\0"+
    "\14\3\35\0\1\317\55\0\3\3\3\0\11\3\1\320"+
    "\14\3\3\0\2\3\2\0\14\3\35\0\1\321\55\0"+
    "\3\3\3\0\11\3\1\322\14\3\3\0\2\3\2\0"+
    "\14\3\32\0\1\323\60\0\3\3\3\0\6\3\1\324"+
    "\17\3\3\0\2\3\2\0\14\3\32\0\1\325\60\0"+
    "\3\3\3\0\6\3\1\326\17\3\3\0\2\3\2\0"+
    "\14\3\31\0\1\327\61\0\3\3\3\0\5\3\1\330"+
    "\20\3\3\0\2\3\2\0\14\3\26\0\1\331\64\0"+
    "\3\3\3\0\2\3\1\332\23\3\3\0\2\3\2\0"+
    "\14\3\27\0\1\333\63\0\3\3\3\0\3\3\1\334"+
    "\22\3\3\0\2\3\2\0\14\3\24\0\1\335\66\0"+
    "\3\3\3\0\1\336\25\3\3\0\2\3\2\0\14\3"+
    "\55\0\1\337\35\0\3\3\3\0\26\3\3\0\1\340"+
    "\1\3\2\0\14\3\55\0\1\341\35\0\3\3\3\0"+
    "\26\3\3\0\1\342\1\3\2\0\14\3\61\0\1\343"+
    "\31\0\3\3\3\0\26\3\3\0\2\3\2\0\1\344"+
    "\13\3\61\0\1\345\31\0\3\3\3\0\26\3\3\0"+
    "\2\3\2\0\1\346\13\3\27\0\1\347\63\0\3\3"+
    "\3\0\3\3\1\350\22\3\3\0\2\3\2\0\14\3"+
    "\24\0\1\351\66\0\3\3\3\0\1\352\25\3\3\0"+
    "\2\3\2\0\14\3\46\0\1\353\44\0\3\3\3\0"+
    "\22\3\1\354\3\3\3\0\2\3\2\0\14\3\42\0"+
    "\1\355\50\0\3\3\3\0\16\3\1\356\7\3\3\0"+
    "\2\3\2\0\14\3\56\0\1\357\34\0\3\3\3\0"+
    "\26\3\3\0\1\3\1\360\2\0\14\3\56\0\1\361"+
    "\34\0\3\3\3\0\26\3\3\0\1\3\1\362\2\0"+
    "\14\3\62\0\1\363\30\0\3\3\3\0\26\3\3\0"+
    "\2\3\2\0\1\3\1\364\12\3\62\0\1\365\30\0"+
    "\3\3\3\0\26\3\3\0\2\3\2\0\1\3\1\366"+
    "\12\3\46\0\1\367\44\0\3\3\3\0\22\3\1\370"+
    "\3\3\3\0\2\3\2\0\14\3\42\0\1\371\50\0"+
    "\3\3\3\0\16\3\1\372\7\3\3\0\2\3\2\0"+
    "\14\3\30\0\1\373\62\0\3\3\3\0\4\3\1\374"+
    "\21\3\3\0\2\3\2\0\14\3\25\0\1\373\65\0"+
    "\3\3\3\0\1\3\1\374\24\3\3\0\2\3\2\0"+
    "\14\3\31\0\1\375\61\0\3\3\3\0\5\3\1\376"+
    "\20\3\3\0\2\3\2\0\14\3\31\0\1\377\61\0"+
    "\3\3\3\0\5\3\1\u0100\20\3\3\0\2\3\2\0"+
    "\14\3\26\0\1\u0101\64\0\3\3\3\0\2\3\1\u0102"+
    "\23\3\3\0\2\3\2\0\14\3\26\0\1\u0103\64\0"+
    "\3\3\3\0\2\3\1\u0104\23\3\3\0\2\3\2\0"+
    "\14\3\30\0\1\u0105\62\0\3\3\3\0\4\3\1\u0106"+
    "\21\3\3\0\2\3\2\0\14\3\25\0\1\u0105\65\0"+
    "\3\3\3\0\1\3\1\u0106\24\3\3\0\2\3\2\0"+
    "\14\3\27\0\1\u0107\63\0\3\3\3\0\3\3\1\u0108"+
    "\22\3\3\0\2\3\2\0\14\3\27\0\1\u0109\63\0"+
    "\3\3\3\0\3\3\1\u010a\22\3\3\0\2\3\2\0"+
    "\14\3\24\0\1\u010b\66\0\3\3\3\0\1\u010c\25\3"+
    "\3\0\2\3\2\0\14\3\24\0\1\u010d\66\0\3\3"+
    "\3\0\1\u010e\25\3\3\0\2\3\2\0\14\3\46\0"+
    "\1\u010f\44\0\3\3\3\0\22\3\1\u0110\3\3\3\0"+
    "\2\3\2\0\14\3\46\0\1\u0111\44\0\3\3\3\0"+
    "\22\3\1\u0112\3\3\3\0\2\3\2\0\14\3\42\0"+
    "\1\u0113\50\0\3\3\3\0\16\3\1\u0114\7\3\3\0"+
    "\2\3\2\0\14\3\42\0\1\u0115\50\0\3\3\3\0"+
    "\16\3\1\u0116\7\3\3\0\2\3\2\0\14\3\30\0"+
    "\1\u0117\62\0\3\3\3\0\4\3\1\u0118\21\3\3\0"+
    "\2\3\2\0\14\3\30\0\1\u0119\62\0\3\3\3\0"+
    "\4\3\1\u011a\21\3\3\0\2\3\2\0\14\3\25\0"+
    "\1\u0117\65\0\3\3\3\0\1\3\1\u0118\24\3\3\0"+
    "\2\3\2\0\14\3\25\0\1\u0119\65\0\3\3\3\0"+
    "\1\3\1\u011a\24\3\3\0\2\3\2\0\14\3\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14823];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\30\1\3\11"+
    "\1\1\6\11\1\1\2\0\16\1\4\11\12\1\1\0"+
    "\2\11\1\0\1\1\1\0\24\1\1\11\1\0\22\1"+
    "\1\0\15\1\1\11\21\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	MatchProcessor mp = new MatchProcessor();
	public ArrayList<com.tpi.teoi.Symbol> get_result(){
	    return mp.get_result();
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Caracter no permitido: <" + yytext() + "> en la linea " + yyline);
            } 
            // fall through
          case 42: break;
          case 2: 
            { mp.process_match("ID", yytext());
            } 
            // fall through
          case 43: break;
          case 3: 
            { mp.process_match("CONST_INT", yytext());
            } 
            // fall through
          case 44: break;
          case 4: 
            { /* ignore */
            } 
            // fall through
          case 45: break;
          case 5: 
            { mp.process_match("SIG_DIV", yytext());
            } 
            // fall through
          case 46: break;
          case 6: 
            { mp.process_match("SIG_MUL", yytext());
            } 
            // fall through
          case 47: break;
          case 7: 
            { mp.process_match("MAYOR", yytext());
            } 
            // fall through
          case 48: break;
          case 8: 
            { mp.process_match("IGUAL", yytext());
            } 
            // fall through
          case 49: break;
          case 9: 
            { mp.process_match("MENOR", yytext());
            } 
            // fall through
          case 50: break;
          case 10: 
            { mp.process_match("SIG_MENOS", yytext());
            } 
            // fall through
          case 51: break;
          case 11: 
            { mp.process_match("SIG_MAS", yytext());
            } 
            // fall through
          case 52: break;
          case 12: 
            { mp.process_match("COMA", yytext());
            } 
            // fall through
          case 53: break;
          case 13: 
            { mp.process_match("PUNTO_Y_COMA", yytext());
            } 
            // fall through
          case 54: break;
          case 14: 
            { mp.process_match("SQR_BRACKET_OPEN", yytext());
            } 
            // fall through
          case 55: break;
          case 15: 
            { mp.process_match("SQR_BRACKET_CLOSE", yytext());
            } 
            // fall through
          case 56: break;
          case 16: 
            { mp.process_match("BRACKET_OPEN", yytext());
            } 
            // fall through
          case 57: break;
          case 17: 
            { mp.process_match("BRACKET_CLOSE", yytext());
            } 
            // fall through
          case 58: break;
          case 18: 
            { mp.process_match("KEY_OPEN", yytext());
            } 
            // fall through
          case 59: break;
          case 19: 
            { mp.process_match("KEY_CLOSE", yytext());
            } 
            // fall through
          case 60: break;
          case 20: 
            { mp.process_match("IF", yytext());
            } 
            // fall through
          case 61: break;
          case 21: 
            { mp.process_match("OR", yytext());
            } 
            // fall through
          case 62: break;
          case 22: 
            { mp.process_match("MAYOR_I", yytext());
            } 
            // fall through
          case 63: break;
          case 23: 
            { mp.process_match("DISTINTO", yytext());
            } 
            // fall through
          case 64: break;
          case 24: 
            { mp.process_match("MENOR_I", yytext());
            } 
            // fall through
          case 65: break;
          case 25: 
            { mp.process_match("CONST_STRING", yytext());
            } 
            // fall through
          case 66: break;
          case 26: 
            { mp.process_match("OP_DECLARE", yytext());
            } 
            // fall through
          case 67: break;
          case 27: 
            { mp.process_match("CONST_FLOAT", yytext());
            } 
            // fall through
          case 68: break;
          case 28: 
            { mp.process_match("TYPE_INT", yytext());
            } 
            // fall through
          case 69: break;
          case 29: 
            { mp.process_match("AND", yytext());
            } 
            // fall through
          case 70: break;
          case 30: 
            { mp.process_match("OP_ASSIGN", yytext());
            } 
            // fall through
          case 71: break;
          case 31: 
            { mp.process_match("TAKE", yytext());
            } 
            // fall through
          case 72: break;
          case 32: 
            { mp.process_match("ELSE", yytext());
            } 
            // fall through
          case 73: break;
          case 33: 
            { mp.process_match("TYPE_FLOAT", yytext());
            } 
            // fall through
          case 74: break;
          case 34: 
            { mp.process_match("EXIT", yytext());
            } 
            // fall through
          case 75: break;
          case 35: 
            { mp.process_match("WHILE", yytext());
            } 
            // fall through
          case 76: break;
          case 36: 
            { /* IGNORE */
            } 
            // fall through
          case 77: break;
          case 37: 
            { mp.process_match("TYPE_STRING", yytext());
            } 
            // fall through
          case 78: break;
          case 38: 
            { mp.process_match("DEC", yytext());
            } 
            // fall through
          case 79: break;
          case 39: 
            { mp.process_match("START", yytext());
            } 
            // fall through
          case 80: break;
          case 40: 
            { mp.process_match("ENDDEC", yytext());
            } 
            // fall through
          case 81: break;
          case 41: 
            { mp.process_match("FINALIZE", yytext());
            } 
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
