/* The following code was generated by JFlex 1.7.0 */

package com.tpi.teoi;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.*;
import jflex.sym;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\42\1\43\1\42\1\42\22\0\1\67\1\0\1\7"+
    "\5\0\1\57\1\60\1\4\1\2\1\5\1\1\1\6\1\3\12\11"+
    "\1\63\1\0\1\66\1\64\1\65\2\0\1\15\1\10\1\46\1\44"+
    "\1\45\1\12\1\32\1\10\1\24\2\10\1\13\1\52\1\25\1\14"+
    "\1\51\1\10\1\31\1\30\1\16\2\10\1\54\3\10\1\55\1\0"+
    "\1\56\1\0\1\36\1\0\1\22\1\10\1\41\1\37\1\40\1\17"+
    "\1\35\1\10\1\26\2\10\1\20\1\50\1\27\1\21\1\47\1\10"+
    "\1\34\1\33\1\23\2\10\1\53\3\10\1\61\1\0\1\62\7\0"+
    "\1\43\u1fa2\0\1\43\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\14\7\1\11\6\7\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\1\1\20\1\21\1\22\2\0"+
    "\1\23\1\0\1\7\1\24\17\7\1\0\1\25\1\20"+
    "\1\26\1\27\1\30\1\0\1\31\1\7\1\32\1\7"+
    "\1\33\12\7\1\34\1\0\16\7\1\0\1\35\12\7"+
    "\1\36\1\37\1\40\20\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\3\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\2\41\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\2\42\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\2\43\2\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\70\0\250\0\70\0\70\0\340"+
    "\0\u0118\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\70\0\u0428"+
    "\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\340\0\70\0\u0690\0\u06c8\0\u0118\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\70\0\70\0\70"+
    "\0\70\0\70\0\u0a80\0\u0690\0\u0ab8\0\u0118\0\u0af0\0\u0118"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\70\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38"+
    "\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u0118\0\u10d8\0\u1110\0\u1148\0\u1180"+
    "\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u0118\0\70"+
    "\0\u0118\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18"+
    "\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8"+
    "\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098"+
    "\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258"+
    "\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418"+
    "\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8"+
    "\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798"+
    "\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958"+
    "\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18"+
    "\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\70\0\u0118\0\u2c68"+
    "\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\70"+
    "\0\u0118\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138"+
    "\0\u3170\0\70\0\u0118\0\70\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\11\1\14\1\15\1\11\1\16"+
    "\1\11\1\17\1\20\1\11\1\21\1\11\1\22\1\11"+
    "\1\23\2\11\1\24\2\11\1\2\1\25\1\26\1\11"+
    "\1\27\1\2\1\30\1\31\1\11\1\32\1\11\1\33"+
    "\1\11\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\27\101\0\1\12"+
    "\61\0\1\50\65\0\1\51\3\0\2\51\1\52\26\51"+
    "\1\0\4\51\1\0\11\51\12\0\1\51\10\0\32\11"+
    "\2\0\11\11\21\0\1\53\2\0\1\12\66\0\3\11"+
    "\1\54\26\11\2\0\11\11\23\0\21\11\1\55\10\11"+
    "\2\0\11\11\23\0\15\11\1\56\14\11\2\0\11\11"+
    "\23\0\10\11\1\57\21\11\2\0\11\11\23\0\24\11"+
    "\1\55\5\11\2\0\11\11\23\0\17\11\1\60\12\11"+
    "\2\0\11\11\23\0\15\11\1\61\14\11\2\0\11\11"+
    "\23\0\17\11\1\62\12\11\2\0\11\11\23\0\6\11"+
    "\1\63\23\11\2\0\11\11\23\0\13\11\1\64\16\11"+
    "\2\0\11\11\23\0\30\11\1\65\1\11\2\0\11\11"+
    "\23\0\17\11\1\66\12\11\2\0\11\11\23\0\32\11"+
    "\2\0\1\11\1\67\7\11\23\0\15\11\1\70\14\11"+
    "\2\0\11\11\23\0\24\11\1\71\5\11\2\0\11\11"+
    "\23\0\21\11\1\72\10\11\2\0\11\11\23\0\24\11"+
    "\1\73\5\11\2\0\11\11\23\0\21\11\1\74\10\11"+
    "\2\0\11\11\76\0\1\75\1\76\67\0\1\77\67\0"+
    "\1\100\67\0\1\101\1\102\6\0\1\103\74\0\1\104"+
    "\66\0\4\11\1\105\25\11\2\0\11\11\23\0\32\11"+
    "\2\0\1\106\10\11\23\0\11\11\1\107\20\11\2\0"+
    "\11\11\23\0\27\11\1\106\2\11\2\0\11\11\23\0"+
    "\6\11\1\110\23\11\2\0\11\11\23\0\13\11\1\110"+
    "\16\11\2\0\11\11\23\0\21\11\1\111\10\11\2\0"+
    "\11\11\23\0\24\11\1\112\5\11\2\0\11\11\23\0"+
    "\31\11\1\113\2\0\11\11\23\0\27\11\1\114\2\11"+
    "\2\0\11\11\23\0\32\11\2\0\2\11\1\115\6\11"+
    "\23\0\32\11\2\0\1\116\10\11\23\0\11\11\1\117"+
    "\20\11\2\0\11\11\23\0\4\11\1\120\25\11\2\0"+
    "\11\11\23\0\16\11\1\121\13\11\2\0\11\11\23\0"+
    "\14\11\1\122\15\11\2\0\11\11\77\0\1\123\4\0"+
    "\1\103\2\0\1\124\2\103\1\0\26\103\1\0\4\103"+
    "\1\0\11\103\12\0\1\103\10\0\5\11\1\125\24\11"+
    "\2\0\11\11\23\0\12\11\1\126\17\11\2\0\11\11"+
    "\23\0\14\11\1\127\15\11\2\0\11\11\23\0\16\11"+
    "\1\130\13\11\2\0\11\11\23\0\10\11\1\131\21\11"+
    "\2\0\11\11\23\0\27\11\1\132\2\11\2\0\3\11"+
    "\1\133\5\11\23\0\3\11\1\134\26\11\2\0\11\11"+
    "\23\0\32\11\2\0\1\135\4\11\1\136\3\11\23\0"+
    "\25\11\1\137\4\11\2\0\11\11\23\0\22\11\1\140"+
    "\7\11\2\0\11\11\23\0\13\11\1\141\16\11\2\0"+
    "\11\11\23\0\6\11\1\142\23\11\2\0\11\11\16\0"+
    "\1\143\74\0\6\11\1\144\23\11\2\0\11\11\23\0"+
    "\13\11\1\144\16\11\2\0\11\11\23\0\15\11\1\145"+
    "\14\11\2\0\11\11\23\0\17\11\1\146\12\11\2\0"+
    "\11\11\23\0\12\11\1\147\17\11\2\0\11\11\23\0"+
    "\30\11\1\150\1\11\2\0\11\11\23\0\24\11\1\151"+
    "\5\11\2\0\11\11\23\0\5\11\1\152\24\11\2\0"+
    "\11\11\23\0\32\11\2\0\1\11\1\153\7\11\23\0"+
    "\21\11\1\154\10\11\2\0\11\11\23\0\24\11\1\155"+
    "\5\11\2\0\11\11\23\0\21\11\1\156\10\11\2\0"+
    "\11\11\23\0\30\11\1\157\1\11\2\0\11\11\23\0"+
    "\32\11\2\0\1\11\1\157\7\11\16\0\1\160\74\0"+
    "\22\11\1\161\7\11\2\0\11\11\23\0\25\11\1\161"+
    "\4\11\2\0\11\11\23\0\24\11\1\162\5\11\2\0"+
    "\11\11\23\0\31\11\1\163\2\0\11\11\23\0\11\11"+
    "\1\164\20\11\2\0\11\11\23\0\21\11\1\165\10\11"+
    "\2\0\11\11\23\0\32\11\2\0\2\11\1\166\6\11"+
    "\23\0\4\11\1\167\25\11\2\0\11\11\23\0\12\11"+
    "\1\170\17\11\2\0\11\11\23\0\5\11\1\171\24\11"+
    "\2\0\11\11\23\0\30\11\1\172\1\11\2\0\11\11"+
    "\23\0\10\11\1\173\21\11\2\0\11\11\23\0\25\11"+
    "\1\174\4\11\2\0\11\11\23\0\32\11\2\0\1\11"+
    "\1\175\7\11\23\0\3\11\1\176\26\11\2\0\11\11"+
    "\23\0\22\11\1\177\7\11\2\0\11\11\23\0\32\11"+
    "\2\0\4\11\1\200\4\11\23\0\32\11\2\0\6\11"+
    "\1\201\2\11\13\0\10\202\32\203\2\0\11\203\13\202"+
    "\10\0\12\11\1\204\17\11\2\0\11\11\23\0\24\11"+
    "\1\205\5\11\2\0\11\11\13\0\10\206\32\207\2\0"+
    "\11\207\13\206\10\0\5\11\1\210\24\11\2\0\11\11"+
    "\23\0\21\11\1\211\10\11\2\0\11\11\13\0\10\212"+
    "\32\213\2\0\11\213\13\212\10\214\32\215\2\0\11\215"+
    "\13\214\33\0\1\216\44\0\23\11\1\217\6\11\2\0"+
    "\11\11\23\0\24\11\1\220\5\11\2\0\11\11\23\0"+
    "\12\11\1\221\17\11\2\0\11\11\43\0\1\222\47\0"+
    "\20\11\1\223\11\11\2\0\11\11\23\0\21\11\1\224"+
    "\10\11\2\0\11\11\23\0\5\11\1\225\24\11\2\0"+
    "\11\11\46\0\1\226\44\0\23\11\1\227\6\11\2\0"+
    "\11\11\43\0\1\230\47\0\20\11\1\231\11\11\2\0"+
    "\11\11\53\0\1\232\37\0\30\11\1\233\1\11\2\0"+
    "\11\11\23\0\30\11\1\234\1\11\2\0\11\11\23\0"+
    "\32\11\2\0\4\11\1\235\4\11\60\0\1\236\32\0"+
    "\32\11\2\0\1\11\1\237\7\11\23\0\32\11\2\0"+
    "\1\11\1\240\7\11\23\0\32\11\2\0\6\11\1\241"+
    "\2\11\53\0\1\242\37\0\30\11\1\243\1\11\2\0"+
    "\11\11\60\0\1\244\32\0\32\11\2\0\1\11\1\245"+
    "\7\11\54\0\1\246\36\0\31\11\1\247\2\0\11\11"+
    "\13\0\10\250\32\251\2\0\11\251\13\250\10\252\32\253"+
    "\2\0\11\253\13\252\46\0\1\254\31\0\32\11\2\0"+
    "\2\11\1\255\6\11\13\0\10\256\32\257\2\0\11\257"+
    "\13\256\10\260\32\261\2\0\11\261\13\260\41\0\1\262"+
    "\36\0\31\11\1\263\2\0\11\11\61\0\1\264\31\0"+
    "\32\11\2\0\2\11\1\265\6\11\36\0\1\266\54\0"+
    "\13\11\1\267\16\11\2\0\11\11\46\0\1\270\44\0"+
    "\23\11\1\271\6\11\2\0\11\11\46\0\1\272\44\0"+
    "\23\11\1\273\6\11\2\0\11\11\31\0\1\274\61\0"+
    "\6\11\1\275\23\11\2\0\11\11\43\0\1\276\47\0"+
    "\20\11\1\277\11\11\2\0\11\11\43\0\1\300\47\0"+
    "\20\11\1\301\11\11\2\0\11\11\36\0\1\302\54\0"+
    "\13\11\1\303\16\11\2\0\11\11\31\0\1\304\61\0"+
    "\6\11\1\305\23\11\2\0\11\11\41\0\1\306\51\0"+
    "\16\11\1\307\13\11\2\0\11\11\53\0\1\310\37\0"+
    "\30\11\1\311\1\11\2\0\11\11\53\0\1\312\37\0"+
    "\30\11\1\313\1\11\2\0\11\11\37\0\1\314\53\0"+
    "\14\11\1\315\15\11\2\0\11\11\60\0\1\316\32\0"+
    "\32\11\2\0\1\11\1\317\7\11\60\0\1\320\32\0"+
    "\32\11\2\0\1\11\1\321\7\11\41\0\1\322\51\0"+
    "\16\11\1\323\13\11\2\0\11\11\37\0\1\324\53\0"+
    "\14\11\1\325\15\11\2\0\11\11\34\0\1\326\56\0"+
    "\11\11\1\327\20\11\2\0\11\11\54\0\1\330\36\0"+
    "\31\11\1\331\2\0\11\11\54\0\1\332\36\0\31\11"+
    "\1\333\2\0\11\11\27\0\1\334\63\0\4\11\1\335"+
    "\25\11\2\0\11\11\61\0\1\336\31\0\32\11\2\0"+
    "\2\11\1\337\6\11\61\0\1\340\31\0\32\11\2\0"+
    "\2\11\1\341\6\11\34\0\1\342\56\0\11\11\1\343"+
    "\20\11\2\0\11\11\27\0\1\344\63\0\4\11\1\345"+
    "\25\11\2\0\11\11\42\0\1\346\50\0\17\11\1\347"+
    "\12\11\2\0\11\11\36\0\1\350\54\0\13\11\1\351"+
    "\16\11\2\0\11\11\36\0\1\352\54\0\13\11\1\353"+
    "\16\11\2\0\11\11\40\0\1\346\52\0\15\11\1\347"+
    "\14\11\2\0\11\11\31\0\1\354\61\0\6\11\1\355"+
    "\23\11\2\0\11\11\31\0\1\356\61\0\6\11\1\357"+
    "\23\11\2\0\11\11\42\0\1\360\50\0\17\11\1\361"+
    "\12\11\2\0\11\11\40\0\1\360\52\0\15\11\1\361"+
    "\14\11\2\0\11\11\41\0\1\362\51\0\16\11\1\363"+
    "\13\11\2\0\11\11\41\0\1\364\51\0\16\11\1\365"+
    "\13\11\2\0\11\11\37\0\1\366\53\0\14\11\1\367"+
    "\15\11\2\0\11\11\37\0\1\370\53\0\14\11\1\371"+
    "\15\11\2\0\11\11\34\0\1\372\56\0\11\11\1\373"+
    "\20\11\2\0\11\11\34\0\1\374\56\0\11\11\1\375"+
    "\20\11\2\0\11\11\27\0\1\376\63\0\4\11\1\377"+
    "\25\11\2\0\11\11\27\0\1\u0100\63\0\4\11\1\u0101"+
    "\25\11\2\0\11\11\42\0\1\u0102\50\0\17\11\1\u0103"+
    "\12\11\2\0\11\11\42\0\1\u0104\50\0\17\11\1\u0105"+
    "\12\11\2\0\11\11\40\0\1\u0102\52\0\15\11\1\u0103"+
    "\14\11\2\0\11\11\40\0\1\u0104\52\0\15\11\1\u0105"+
    "\14\11\2\0\11\11\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12712];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\17\1\1\11"+
    "\6\1\6\11\4\1\2\0\1\11\1\0\21\1\1\0"+
    "\5\11\1\0\17\1\1\11\1\0\16\1\1\0\14\1"+
    "\1\11\21\1\1\0\3\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Caracter no permitido: <" + yytext() + "> en la linea " + yyline);
            } 
            // fall through
          case 37: break;
          case 2: 
            { System.out.println("Token SIG_MENOS encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 38: break;
          case 3: 
            { System.out.println("Token SIG_SUMA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 39: break;
          case 4: 
            { System.out.println("Token SIG_DIV encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 40: break;
          case 5: 
            { System.out.println("Token SIG_MUL encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 41: break;
          case 6: 
            { System.out.println("Token COMA encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 42: break;
          case 7: 
            { System.out.println("Token ID encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 43: break;
          case 8: 
            { System.out.println("Token CONST_INT, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 44: break;
          case 9: 
            { /* ignore */
            } 
            // fall through
          case 45: break;
          case 10: 
            { System.out.println("Token SQR_BRACKET_OPEN, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 46: break;
          case 11: 
            { System.out.println("Token SQR_BRACKET_CLOSE, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 47: break;
          case 12: 
            { System.out.println("Token BRACKET_OPEN, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 48: break;
          case 13: 
            { System.out.println("Token BRACKET_CLOSE, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 49: break;
          case 14: 
            { System.out.println("Token KEY_OPEN, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 50: break;
          case 15: 
            { System.out.println("Token KEY_CLOSE, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 51: break;
          case 16: 
            { System.out.println("Token IGUAL, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 52: break;
          case 17: 
            { System.out.println("Token MAYOR, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 53: break;
          case 18: 
            { System.out.println("Token MENOR, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 54: break;
          case 19: 
            { System.out.println("Token CONS_STRING, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 55: break;
          case 20: 
            { System.out.println("Token OR, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 56: break;
          case 21: 
            { System.out.println("Token OP_DECLARE encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 57: break;
          case 22: 
            { System.out.println("Token MAYOR_I, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 58: break;
          case 23: 
            { System.out.println("Token MENOR_I, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 59: break;
          case 24: 
            { System.out.println("Token DISTINTO, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 60: break;
          case 25: 
            { System.out.println("Token CONST_FLOAT, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 61: break;
          case 26: 
            { System.out.println("Token AND, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 62: break;
          case 27: 
            { System.out.println("Token TYPE_INT encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 63: break;
          case 28: 
            { System.out.println("Token OP_ASSIGN encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 64: break;
          case 29: 
            { System.out.println("Token TYPE_FLOAT encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 65: break;
          case 30: 
            { System.out.println("Token EXIT, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 66: break;
          case 31: 
            { /* IGNORE */
            } 
            // fall through
          case 67: break;
          case 32: 
            { System.out.println("Token TYPE_STRING encontrado, Lexema "+ yytext());
            } 
            // fall through
          case 68: break;
          case 33: 
            { System.out.println("Token DEC, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 69: break;
          case 34: 
            { System.out.println("Token START, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 70: break;
          case 35: 
            { System.out.println("Token ENDDEC, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 71: break;
          case 36: 
            { System.out.println("Token FINALIZE, encontrado Lexema "+ yytext());
            } 
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
